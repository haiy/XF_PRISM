cscope 15 $HOME/Documents/Github/XF_PRISM/src -q 0000000394 0000067476
	@check_erro_part.c

3 
Ê_ç
 
	gXk_chg
=
dñ_lsi
(
lsi
,
Xk_∂us
,
M
);

4  
	gXk_chg
->
	gk
 > 2 && 
	gYm
->k>0)

6 
	glsi_chg
=
glsi
(
Xk_chg
,
M
);

7 
	gXk_miu_chg
=
dñ_lsi
(
lsi_chg
,
Xk_chg
,
M
);

8 if(
EXACT
–
Xk_miu_chg
->
sig
Ë> EXACT(
Xk
->
èû
->
≤
->sig) )

10 
l°_Ωlc
(&
Xk_chg
,&
Xk_miu_chg
);

11 
‰ì
(
Xk_miu_chg
->
membs
);

12 
‰ì
(
Xk_miu_chg
);

13 
add_node
(
Xk
->
èû
->
©r
,
Ym
,Xk,
M
);

17 
add_node
(
msw
,
Xk
,
Ym
,
M
);

18 
Ê_ç
 
	gnXk
=
dñ_lsi
(
lsi
,
Xk
,
M
);

19 
l°_Ωlc
(&
Xk
,&
nXk
);

20 
‰ì
(
nXk
->
membs
);

21 
‰ì
(
nXk
);

22 
‰ì
(
Xk_miu_chg
->
membs
);

23 
‰ì
(
Xk_miu_chg
);

27 
‰ì
(
Xk_∂us
->
membs
);

28 
‰ì
(
Xk_∂us
);

	@fcbf.c

1 
	~"fcbf.h
"

3 
li°
 * 
	$fcfs
(
mic_m©rix
 
M
,
ß
)

5 
©∫
=
M
.atrn;

6 
d©a_ty≥
 *
MICS
=(d©a_ty≥ *)
	`mÆloc
((d©a_ty≥)*(
M
.
©∫
-1));

8 
i
=0;

10 
i
=0;i<
©∫
-1;i++)

13 
MICS
[
i
].
vÆ
=
M
.
mic
[ M.
˛ass_idx
 ][ i ];

14 
MICS
[
i
].
pos
=i;

17 
	`q_s‹t
(
MICS
,
©∫
-1);

20 
li°
 *
l°
=÷i° * )
	`mÆloc
((list));

21 
l°
->
hódî
=
NULL
;

22 
l°
->
èû
=
NULL
;

23 
l°
->
Àn
=0;

24 
sigema
=
ß
;

25 
i
=
©∫
-2;i>=0;i--)

27 if(!(
	`EXACT
(
MICS
[
i
].
vÆ
)<EXACT(
sigema
)))

29 
	`ö_mic
(
l°
,
MICS
[
i
]);

36 
	`‰ì
(
MICS
);

38 
li°_node
 *
ç
=
l°
->
hódî
;

39 
ç
)

41 
li°_node
 *
tq
=
ç
->
¬
;

42 
tq
)

45 
a
=
ç
->
idx
;

46 
b
=
tq
->
idx
;

47 
Ωq
=0;

48 if(
a
>
b
Ë
Ωq
=
M
.
mic
[a][b];

49 if(
a
<
b
Ë
Ωq
=
M
.
mic
[b][a];

53 if(!(
	`EXACT
(
Ωq
)<EXACT(
tq
->
mic
)))

55 
	`dñ_l_±r
(
l°
,
tq
);

56 
tq
=
ç
->
¬
;

60 
tq
Òq->
¬
;

63 
ç
Òp->
¬
;

65  
l°
;

66 
	}
}

69 
	$ö_mic
(
li°
 *
l°
,
d©a_ty≥
 
m
)

71 
	`add_l
(
l°
);

72 
l°
->
èû
->
mic
=
m
.
vÆ
;

73 
l°
->
èû
->
idx
=
m
.
pos
;

74 
	}
}

77 
	$add_l
(
li°
 * 
l°
)

79 
li°_node
 *
ç
=÷i°_nodê*)
	`mÆloc
((list_node));

80 if(
l°
->
hódî
==
NULL
)

82 
ç
->
≤
=
NULL
;

83 
ç
->
¬
=
NULL
;

84 
l°
->
hódî
=
ç
;

85 
l°
->
èû
=
ç
;

89 
ç
->
≤
=
l°
->
èû
;

90 
ç
->
¬
=
NULL
;

91 
l°
->
èû
->
¬
=
ç
;

92 
l°
->
èû
=
ç
;

94 
l°
->
Àn
+=1;

95 
	}
}

98 
	$dñ_l_±r
(
li°
 *
l°
,
li°_node
 *
ç
)

100 
l°
->
Àn
-=1;

101 if(
ç
->
≤
==
NULL
)

103 if(
ç
->
¬
==
NULL
)

105 
l°
->
hódî
=
NULL
;

106 
l°
->
èû
=
NULL
;

107 
	`‰ì
(
ç
);

112 
l°
->
hódî
=
ç
->
¬
;

113 
ç
->
¬
->
≤
=
NULL
;

114 
	`‰ì
(
ç
);

118 if(
ç
->
¬
==
NULL
)

120 
l°
->
èû
=
ç
->
≤
;

121 
l°
->
èû
->
¬
=
NULL
;

122 
	`‰ì
(
ç
);

127 
ç
->
≤
->
¬
=tp->nn;

128 
ç
->
¬
->
≤
=tp->pn;

129 
	`‰ì
(
ç
);

132 
	`¥ötf
("NodeÑemoveÉrror !\n");

133 
	}
}

136 
	$brk_l
(
li°
 *
l°
)

138 
l°
->
Àn
=0;

139 if(
l°
==
NULL
)

143 
li°_node
 * 
cur
=
l°
->
hódî
;

144 
li°_node
 * 
ç
=
cur
;

145 
cur
)

147 
ç
=
cur
;

148 
cur
=cur->
¬
;

149 
	`‰ì
(
ç
);

151 
l°
->
hódî
=
NULL
;

152 
	}
}

154 
	$chk_l
(
li°
 *
l°
)

156 
li°_node
 * 
cur
=
l°
->
hódî
;

157 
i
=0;

158 
cur
)

160 
	`¥ötf
("%d:%f\t",
cur
->
idx
,cur->
mic
);

161 
i
+=1;

162 
cur
=cur->
¬
;

164 
	`puts
("");

165 
	`¥ötf
("Föd %dÇode†ö %dÇode†li°.\n",
i
,
l°
->
Àn
);

166 
	}
}

	@fcbf.h

1 #i‚de‡
MICFS_HEADER


2 
	#MICFS_HEADER


	)

3 
	~"mic_m©rix.h
"

4 
	~"mic.h
"

6 
	sLi°Node


8 
	mmic
;

9 
	midx
;

10 
Li°Node
 *
	m¬
;

11 
Li°Node
 *
	m≤
;

12 }
	tli°_node
;

14 
	sLi°


16 
li°_node
 * 
	mhódî
;

17 
li°_node
 * 
	mèû
;

18 
	mÀn
;

19 }
	tli°
;

21 
add_l
(
li°
 * 
l°
);

22 
dñ_l_±r
(
li°
 *
l°
,
li°_node
 *
ç
);

23 
brk_l
(
li°
 *
l°
);

24 
ö_mic
(
li°
 *
l°
,
d©a_ty≥
 
m
);

25 
chk_l
(
li°
 *
l°
);

27 
li°
 * 
fcfs
(
mic_m©rix
 
M
,
ß
);

	@ga.c

1 
	~"ga.h
"

18 
chro_±r
 
	$ga
(
mic_m©rix
 
M
,
psz
,
n
,
pc
,
pm
)

20 
	`§™d
(()
	`time
(
NULL
));

21 
p›uœti⁄
 
p›
;

22 
p›
.
n
=
psz
;

23 
p›
.
acu
=(*)
	`mÆloc
(()*p›.
n
);

24 if(
p›
.
acu
==
NULL
)

26 
	`puts
("GAácu memoryÉrror!");

27 
	`exô
(1);

29 
i
=0;

30 
i
=0;i<
p›
.
n
;i++)

32 
p›
.
acu
[
i
]=0;

34 
p›
.
pc
=pc;

35 
p›
.
pm
=pm;

36 
	`öi_p›
(
M
,&
p›
);

37 
p›uœti⁄
 *
S
=
	`öi_tmp›
(
p›
);

38 
T
=
p›
.
n
;

39 
Gn
=0;

40 
N
=
n
;

44 #ifde‡
check_ga


45 
	`¥ötf
("Thê%d gíî©i⁄'†be° %f.\n",
Gn
,
p›
.
m
[0].
sig
);

47 
n
=0;

48 
	`ˇl_acu
(&
p›
);

51 
chro_±r
 
Áthî
=
	`£l_⁄e
(
p›
);

52 
chro_±r
 
mŸhî
=
	`£l_⁄e
(
p›
);

53 
	`˝y_chro
(
Áthî
,&(
S
->
m
[
n
]));

54 
	`˝y_chro
(
mŸhî
,&(
S
->
m
[
n
+1]));

55 if(
	`CY
(
p›
))

57 
	`¸oss_ovî
(&(
S
->
m
[
n
]),&(S->m[n+1]));

59 if(
	`MT
(
p›
))

61 
	`muèti⁄
(&(
S
->
m
[
n
]));

63 if(
	`MT
(
p›
))

65 
	`muèti⁄
(&(
S
->
m
[
n
+1]));

67 
n
+=2;

68 }
n
<
T
);

69 
	`upd©e_p›
(
S
,
M
);

70 
	`ñôi°_£l
(&
p›
,
S
);

71 }++
Gn
<
N
);

72 
chro_±r
 
b°
=(chro_±r)
	`mÆloc
((
chrosome
));

73 
b°
->
l
=
p›
.
m
[0].l;

74 
b°
->
chro
=(*)
	`mÆloc
(()*(b°->
l
));

75 
	`˝y_chro
(&(
p›
.
m
[0]),
b°
);

76 
	`brk_p›
(&
p›
);

77 
	`brk_p›
(
S
);

78  
b°
;

79 
	}
}

82 
	$öi_p›
(
mic_m©rix
 
M
,
p›uœti⁄
 *
p›
)

84 
p›
->
m
=(
chro_±r
)
	`mÆloc
((
chrosome
)*’›->
n
));

85 if(
p›
->
m
==
NULL
)

87 
	`¥ötf
("Ini_pop memoryÉrror!\n");

89 
i
=0;

90 
i
 < 
p›
->
n
)

93 
p›
->
m
[
i
].
l
=
M
.
©∫
-1;

94 
p›
->
m
[
i
].
chro
=(*)
	`mÆloc
(()*’›->m[i].
l
));

95 if(
p›
->
m
[
i
].
chro
==
NULL
)

97 
	`¥ötf
("GA ini_pop memÉrror!\n");

98 
	`exô
(0);

100 
j
=0;

101 ;
j
<
p›
->
m
[
i
].
l
;j++)

103 
p›
->
m
[
i
].
chro
[
j
]=
	`ønd
()%2;

105 **
gç
=(**)
	`mÆloc
((*));

106 if(
gç
==
NULL
)

108 
	`puts
("GA gtp memÉrror!");

109 
	`exô
(1);

111 
num
=
	`gíty≥
(
p›
->
m
[
i
].
chro
,
gç
,p›->m[i].
l
);

112 
p›
->
m
[
i
].
sig
=
	`ˇl_mîô
(
gç
[0],
num
,
M
);

113 
	`‰ì
(*
gç
);

114 
	`‰ì
(
gç
);

115 
gç
=
NULL
;

117 
i
++;

119 
	}
}

122 
p›uœti⁄
 *
	$öi_tmp›
(
p›uœti⁄
 
p›
)

124 
p›uœti⁄
 *
s
=’›uœti⁄ *)
	`mÆloc
((population));

125 
s
->
n
=
p›
.n;

126 
s
->
acu
=
NULL
;

127 
s
->
pc
=
p›
.pc;

128 
s
->
pm
=
p›
.pm;

129 
s
->
m
=(
chro_±r
)
	`mÆloc
((
chrosome
)*(
p›
.
n
));

130 
i
=0;

131 
i
=0;i<
p›
.
n
;i++)

133 
s
->
m
[
i
].
l
=
p›
.m[i].l;

134 
s
->
m
[
i
].
sig
=0.00;

135 
s
->
m
[
i
].
chro
=(*)
	`mÆloc
(()*(s->m[i].
l
));

136 
j
=0;

137 
j
=0;j<
s
->
m
[
i
].
l
;j++)

139 
s
->
m
[
i
].
chro
[
j
]=0;

142  
s
;

143 
	}
}

145 
	$gíty≥
(*
böcode
,** 
gç
,
 
)

147 
i
=0;

148 
k
=0;

150 
i
<
 
)

152 if(
böcode
[
i
]==1)

154 
k
++;

156 
i
++;

158 
gç
[0]=(*)
	`mÆloc
(()*
k
);

159 if(
gç
[0]==
NULL
)

161 
	`puts
("gentype gtp memÉrror!");

162 
	`exô
(1);

165 
i
=0;

166 
j
=0;

167 
i
<
 
)

169 if(
böcode
[
i
]==1)

171 
gç
[0][
j
++]=
i
;

173 
i
++;

175  
k
;

176 
	}
}

179 
	$ˇl_acu
(
p›uœti⁄
 *
p›
)

181 
i
=0;

182 
sum
=0.00;

183 
p›
->
acu
=(*)
	`mÆloc
(()*p›->
n
);

184 
i
=0;i<
p›
->
n
;i++)

186 
sum
+=
p›
->
m
[
i
].
sig
;

188 
p›
->
acu
[0]ı›->
m
[0].
sig
/
sum
;

189 
i
=1;i<
p›
->
n
;i++)

191 
p›
->
acu
[
i
]=(Ì›->
m
[i].
sig
/
sum
+pop->acu[i-1];

192 #ifde‡
debug_acu


193 
	`¥ötf
("%f\n",
p›
->
acu
[
i
]);

196 
	}
}

199 
chro_±r
 
	$£l_⁄e
(
p›uœti⁄
 
p›
)

201 
r
=
	`ønd
()%100000/()100000;

202 if(
	`EXACT
(
r
)<=EXACT(
p›
.
acu
[0]))

204 #ifde‡
debug_£l_⁄e


205 
	`¥ötf
("r:%‡i†bëwì¿0ánd %f\n",
r
,
p›
.
acu
[0]);

207  &(
p›
.
m
[0]);

209 
i
=1;

210 
i
<
p›
.
n
)

212 if(
r
<=
p›
.
acu
[
i
]&&r>=pop.acu[i-1])

214 #ifde‡
debug_£l_⁄e


215 
	`¥ötf
("r:%‡i†bëwì¿acu[%d]->%‡™dácu[%d]->%f\n",
r
,
i
-1,
p›
.
acu
[i-1],i,pop.acu[i]);

217  &(
p›
.
m
[
i
]);

221 
i
++;

224  
NULL
;

225 
	}
}

226 
	$˝y_chro
(
chro_±r
 
§c
,chro_±∏
d°
)

228 
i
=0;

229 
d°
->
l
=
§c
->l;

230 
d°
->
sig
=
§c
->sig;

231 
i
=0;i<
§c
->
l
;i++)

233 
d°
->
chro
[
i
]=
§c
->chro[i];

235 
	}
}

237 
	$CY
(
p›uœti⁄
 
p›
)

239 
p
=
	`ønd
()%100000/()100000.00;

240 if(
p
<
p›
.
pc
&&p>0)

248 
	}
}

249 
	$MT
(
p›uœti⁄
 
p›
)

251 
p
=
	`ønd
()%100000/()100000.00;

252 if(
p
<
p›
.
pm
&&p>0)

260 
	}
}

263 
	$¸oss_ovî
(
chro_±r
 
Áthî
,chro_±∏
mŸhî
)

265 
r
=
	`ønd
()%(
Áthî
->
l
);

266 #ifde‡
debug_¸x


267 
	`¥ötf
("¸os†posôi⁄ :%d\n",
r
);

269 
i
=0;

270 
i
=
r
;i<
Áthî
->
l
;i++)

272 
a
=
Áthî
->
chro
[
i
];

273 
Áthî
->
chro
[
i
]=
mŸhî
->chro[i];

274 
mŸhî
->
chro
[
i
]=
a
;

276 
r
=
	`ønd
()%(
Áthî
->
l
);

277 #ifde‡
debug_¸x


278 
	`¥ötf
("¸os†posôi⁄ :%d\n",
r
);

280 
i
=
r
;i<
Áthî
->
l
;i++)

282 
a
=
Áthî
->
chro
[
i
];

283 
Áthî
->
chro
[
i
]=
mŸhî
->chro[i];

284 
mŸhî
->
chro
[
i
]=
a
;

286 
	}
}

289 
	$muèti⁄
(
chro_±r
 
chros
)

291 
r
=
	`ønd
()%(
chros
->
l
);

292 
l
=
	`ønd
()%(
chros
->l);

293 #ifde‡
debug_mt


294 
	`¥ötf
("muèti⁄Öosôi⁄:r:%d,l:%d,chﬁ:%d\n",
r
,
l
,
chros
->l);

296 
i
=0;

297 
°p
=0;

298 if–(
r
+
l
Ë> 
chros
->lË
°p
=chros->l;

299 
°p
=(
r
+
l
);

300 #ifde‡
debug_mt


301 
	`¥ötf
("°p:%d\n",
°p
);

303 
i
=
r
;i<
°p
;i++)

305 
chros
->
chro
[
i
]=(chros->chro[i]+1)%2;

307 
	}
}

309 
p›uœti⁄
 *
	$ñôi°_£l
(
p›uœti⁄
 *
p›
,p›uœti⁄ *
S
)

311 
	`qks‹t
(
p›
);

312 
	`qks‹t
(
S
);

313 #ifde‡
debug_ñt


314 
	`puts
("TheÖop is:\t");

315 
	`check_p›
(*
p›
);

316 
	`puts
("The S is :\t");

317 
	`check_p›
(*
S
);

319 
i
=0;

320 
p
=0;

321 
q
=0;

322 
i
=0;i<
p›
->
n
;i++)

324 if(
	`EXACT
(
p›
->
m
[
p
].
sig
)>EXACT(
S
->m[
q
].sig))

326 
p
++;

330 
	`chg_chro_PS
(
p›
,
i
,
S
,
q
);

331 
q
++;

334 #ifde‡
debug_ñt


335 
	`puts
("After merging...\t");

336 
	`check_p›
(*
p›
);

338  
p›
;

339 
	}
}

341 
	$qks‹t
(
p›uœti⁄
 *
p›
)

343 
	`q•
(0,
p›
->
n
-1,pop);

344 
	}
}

345 
	$q•
(
a
,
b
,
p›uœti⁄
 *
p›
)

347 if(
a
<
b
)

349 
mid
=
	`∑πp
(
a
,
b
,
p›
);

350 
	`q•
(
a
,
mid
-1,
p›
);

351 
	`q•
(
mid
+1,
b
,
p›
);

353 
	}
}

354 
	$∑πp
(
a
,
b
,
p›uœti⁄
 *
p›
)

356 
lb
=
p›
->
m
[
a
].
sig
;

357 
k
=
a
+1;

358 
i
=
a
+1;

359 
i
<=
b
)

361 if(
p›
->
m
[
i
].
sig
>
lb
)

363 
	`chg_chro
(
p›
,
i
,
k
);

364 
k
++;

366 
i
++;

368 
	`chg_chro
(
p›
,
a
,
k
-1);

369  
k
-1;

370 
	}
}

373 
	$chg_chro
(
p›uœti⁄
 *
p›
,
a
,
b
)

375 * 
ç
=
p›
->
m
[
a
].
chro
;

376 
p›
->
m
[
a
].
chro
ı›->m[
b
].chro;

377 
p›
->
m
[
b
].
chro
=
ç
;

378 
t
=
p›
->
m
[
a
].
sig
;

379 
p›
->
m
[
a
].
sig
ı›->m[
b
].sig;

380 
p›
->
m
[
b
].
sig
=
t
;

381 
	}
}

382 
	$chg_chro_PS
(
p›uœti⁄
 *
p›
,
a
,p›uœti⁄ *
S
,
b
)

384 * 
ç
=
p›
->
m
[
a
].
chro
;

385 
p›
->
m
[
a
].
chro
=
S
->m[
b
].chro;

386 
S
->
m
[
b
].
chro
=
ç
;

387 
t
=
p›
->
m
[
a
].
sig
;

388 
p›
->
m
[
a
].
sig
=
S
->m[
b
].sig;

389 
S
->
m
[
b
].
sig
=
t
;

390 
	}
}

393 
	$brk_p›
(
p›uœti⁄
 *
p›
)

395 
i
=0;

396 
i
< 
p›
->
n
)

398 
	`‰ì
(
p›
->
m
[
i
].
chro
);

399 
p›
->
m
[
i
].
chro
=
NULL
;

400 
i
++;

402 
	}
}

404 
	$upd©e_p›
(
p›uœti⁄
 *
S
,
mic_m©rix
 
M
)

406 
i
=0;

407 
i
=0;i<
S
->
n
;i++)

409 **
gç
=(**)
	`mÆloc
((*));

410 
num
=
	`gíty≥
(
S
->
m
[
i
].
chro
,
gç
,S->m[i].
l
);

411 
S
->
m
[
i
].
sig
=
	`ˇl_mîô
(*
gç
,
num
,
M
);

412 
	`‰ì
(*
gç
);

413 
	`‰ì
(
gç
);

414 
gç
=
NULL
;

416 
	}
}

	@ga.h

1 #i‚de‡
GA_HEADER


2 
	#GA_HEADER


	)

4 
	~<time.h
>

5 
	~<°dio.h
>

6 
	~<m©h.h
>

7 
	~<°dlib.h
>

8 
	~"mic_m©rix.h
"

17 
	sChrosome


19 
	ml
;

20 
	msig
;

21 *
	mchro
;

22 }
	tchrosome
,*
	tchro_±r
;

24 
	sP›uœti⁄


26 
	mn
;

27 *
	macu
;

28 
	mpc
;

29 
	mpm
;

30 
chro_±r
 
	mm
;

31 }
	tp›uœti⁄
;

33 
chro_±r
 
ga
(
mic_m©rix
 
M
,
psz
,
n
,
pc
,
pm
);

34 
öi_p›
(
mic_m©rix
 
M
,
p›uœti⁄
 *
p›
);

35 
check_p›
(
p›uœti⁄
 
p›
);

36 
gíty≥
(*
böcode
,**
gç
,
l
);

37 
ˇl_acu
(
p›uœti⁄
 *
p›
);

38 
chro_±r
 
£l_⁄e
(
p›uœti⁄
 
p›
);

39 
p›uœti⁄
 *
öi_tmp›
’›uœti⁄ 
p›
);

40 
¸oss_ovî
(
chro_±r
 
Áthî
,chro_±∏
mŸhî
);

41 
˝y_chro
(
chro_±r
 
§c
,chro_±∏
d°
);

42 
CY
(
p›uœti⁄
 
p›
);

43 
MT
(
p›uœti⁄
 
p›
);

44 
muèti⁄
(
chro_±r
 
chros
);

45 
chg_chro
(
p›uœti⁄
 *
p›
,
a
,
b
);

46 
chg_chro_PS
(
p›uœti⁄
 *
p›
,
a
,p›uœti⁄ *
S
,
b
);

47 
∑πp
(
a
,
b
,
p›uœti⁄
 *
p›
);

48 
q•
(
a
,
b
,
p›uœti⁄
 *
p›
);

49 
qks‹t
(
p›uœti⁄
 *
p›
);

50 
p›uœti⁄
 *
ñôi°_£l
’›uœti⁄ *
p›
,p›uœti⁄ *
S
);

51 
brk_p›
(
p›uœti⁄
 *
p›
);

52 
upd©e_p›
(
p›uœti⁄
 *
S
,
mic_m©rix
 
M
);

	@ga_test.c

1 
	~"ga.h
"

2 
	~"mic_m©rix.h
"

4 
	$check_p›
(
p›uœti⁄
 
p›
)

6 
	`¥ötf
("P› ha†%d mebs.\n",
p›
.
n
);

7 
i
=0;

10 
j
=0;

13 
	`¥ötf
("%d",
p›
.
m
[
i
].
chro
[
j
]);

14 }++
j
<
p›
.
m
[
i
].
l
);

15 
	`¥ötf
("\tsig:%f\n",
p›
.
m
[
i
].
sig
);

16 }++
i
<
p›
.
n
);

17 
	}
}

	@main.c

23 
	~"maö.h
"

29 
	$maö
(
¨gc
,*
¨gv
[])

31 
mic_m©rix
 
M
;

32 *
‚m
=
¨gv
[1];

33 if(
¨gc
<3)

35 
	`¥ötf
("Parameters Error!");

36 
	`exô
(1);

38 
	`fûl_mic_m©rix
(
‚m
,&
M
,
	`©of
(
¨gv
[2]),atof(argv[3]));

40 
	`¥ötf
("GA find ");

41 
p›_size
;

42 
lo›_time
;

43 
pc
;

44 
pm
;

45 
	`sˇnf
("%d%d%f%f",&
p›_size
,&
lo›_time
,&
pc
,&
pm
);

46 
rÊ_±r
 
gab°
=
	`gafs
(
M
,
p›_size
,
lo›_time
,
pc
,
pm
);

47 
	`chk_b°
(*
gab°
);

49 
	`‰ì
(
gab°
->
©rs
);

50 
	`‰ì
(
gab°
);

52 
	`¥ötf
("SFFS find ");

53 
d
;

55 
	`sˇnf
("%d",&
d
);

57 
rÊ_±r
 
sfb°
=
	`sffs_rf
(
M
,
d
);

58 
	`chk_b°
(*
sfb°
);

59 
	`‰ì
(
sfb°
->
©rs
);

60 
	`‰ì
(
sfb°
);

62 
	`¥ötf
("FCFS find ");

63 
thªshﬁd
;

64 
	`sˇnf
("%f",&
thªshﬁd
);

66 
rÊ_±r
 
fcb°
=
	`fcfs_rf
(
M
,
thªshﬁd
);

67 
	`chk_b°
(*
fcb°
);

68 
	`‰ì
(
fcb°
->
©rs
);

69 
	`‰ì
(
fcb°
);

73 
	`¥t_b°
(*
gab°
,
M
);

74 
	`¥t_b°
(*
sfb°
,
M
);

75 
	`¥t_b°
(*
fcb°
,
M
);

77 
	`brk_b°
(&
gab°
);

78 
	`brk_b°
(&
sfb°
);

79 
	`brk_b°
(&
fcb°
);

81 
	}
}

83 
	$chk_b°
(
ªs·s
 
b°
)

85 
	`¥ötf
("%d fótuª†wôh sig %‡.\n",
b°
.
numb
,b°.
sig
);

86 
i
=0;

89 
	`¥ötf
("%d:%f,",
b°
.
©rs
[
i
].
©r
,b°.©rs[i].
mic
);

90 }++
i
<
b°
.
numb
);

91 
	`puts
("");

92 
	}
}

93 
	$¥t_b°
(
ªs·s
 
b°
,
mic_m©rix
 
M
)

95 
i
=0;

96 
	`puts
("");

97 
i
=0;i<
b°
.
numb
*(10+4+1);i++)

99 
	`¥ötf
("%s","-");

101 
	`puts
("");

102 
i
=0;i<
b°
.
numb
;i++)

104 
	`¥ötf
("%10d,\t",
b°
.
©rs
[
i
].
©r
);

106 
	`puts
("");

107 
i
=0;i<
b°
.
numb
*(10+4+1);i++)

109 
	`¥ötf
("%s","-");

111 
	`puts
("");

112 
i
=0;i<
b°
.
numb
;i++)

114 
j
=0;

115 
j
=0;j<=
i
;j++)

117 if(
i
==
j
)

119 
	`¥ötf
("%10d,\t",1);

123 
a
=
b°
.
©rs
[
i
].
©r
;

124 
b
=
b°
.
©rs
[
j
].
©r
;

125 if(
a
>
b
)

126 
	`¥ötf
("%10.5f,\t",
M
.
mic
[ 
a
 ][ 
b
 ]);

128 
	`¥ötf
("%10.5f,\t",
M
.
mic
[ 
b
 ][ 
a
 ]);

132 
	`puts
("");

134 
i
=0;i<
b°
.
numb
*(10+4+1);i++)

136 
	`¥ötf
("%s","-");

138 
	`puts
("");

139 
	}
}

140 
	$brk_b°
(
rÊ_±r
 * 
b°
)

142 
	`‰ì
((*
b°
)->
©rs
);

143 
	`‰ì
(*
b°
);

144 
	}
}

147 
rÊ_±r
 
	$gafs
(
mic_m©rix
 
M
,
psz
,
n
,
pc
,
pm
)

149 
chro_±r
 
b°
=
	`ga
(
M
,
psz
,
n
,
pc
,
pm
);

150 **
gç
=(**)
	`mÆloc
((*));

151 if(
gç
==
NULL
)

153 
	`puts
("GA gtp memory mallocÉrror!");

154 
	`exô
(1);

156 
num
=
	`gíty≥
(
b°
->
chro
,
gç
,b°->
l
);

158 
rÊ_±r
 
gab°
=‘Ê_±r)
	`mÆloc
((
ªs·s
));

159 
gab°
->
numb
=
num
;

160 
gab°
->
sig
=
b°
->sig;

161 
gab°
->
©rs
=(
·p_±r
)
	`mÆloc
((
„©yp
)*(gab°->
numb
));

162 if(
gab°
->
©rs
==
NULL
)

164 
	`puts
("GA gabst memory mallocÉrror!");

165 
	`exô
(1);

167 
i
=0;

168 
i
=0;i< 
gab°
->
numb
;i++)

170 
f
=(*
gç
)[
i
];

171 
gab°
->
©rs
[
i
].
©r
=
f
;

172 if(
f
>
M
.
˛ass_idx
)

173 
gab°
->
©rs
[
i
].
mic

M
.mic[
f
][ M.
˛ass_idx
 ];

175 
gab°
->
©rs
[
i
].
mic

M
.mic[ M.
˛ass_idx
 ][
f
];

177 
	`‰ì
(
b°
->
chro
);

178 
	`‰ì
(
b°
);

179 
	`‰ì
(*
gç
);

180 
	`‰ì
(
gç
);

181  
gab°
;

182 
	}
}

184 
rÊ_±r
 
	$sffs_rf
(
mic_m©rix
 
M
,
n
)

186 
Ê_ç
 
Xk
=
	`sffs
(
M
,
n
);

187 
rÊ_±r
 
sfb°
=‘Ê_±r)
	`mÆloc
((
ªs·s
));

188 
sfb°
->
numb
=
Xk
->
k
;

189 
sfb°
->
sig
=
Xk
->sig;

190 
sfb°
->
©rs
=(
·p_±r
)
	`mÆloc
((
„©yp
)*sfb°->
numb
);

191 
„t_ç
 
cur
=
Xk
->
hódî
;

192 
i
=0;

193 
cur
)

195 
f
=
cur
->
©r
;

196 
sfb°
->
©rs
[
i
].
©r
=
f
;

197 
sfb°
->
©rs
[
i
].
mic
=
M
.mic[ M.
˛ass_idx
 ][ 
f
 ];

198 
cur
=cur->
¬
;

199 
i
++;

201 
	`brk_Êç
(
Xk
);

202 
	`‰ì
(
Xk
->
membs
);

203 
	`‰ì
(
Xk
);

204  
sfb°
;

205 
	}
}

207 
rÊ_±r
 
	$fcfs_rf
(
mic_m©rix
 
M
, 
ß
)

209 
li°
 *
ªsu…
=
	`fcfs
(
M
,
ß
);

210 
rÊ_±r
 
b°
=‘Ê_±r)
	`mÆloc
((
ªs·s
));

211 
b°
->
numb
=
ªsu…
->
Àn
;

212 
b°
->
©rs
=(
·p_±r
)
	`mÆloc
((
„©yp
)*b°->
numb
);

213 
li°_node
 * 
cur
=
ªsu…
->
hódî
;

214 *
fs
=(*)
	`mÆloc
(()*(
ªsu…
->
Àn
));

215 
i
=0;

216 
cur
)

218 
f
=
cur
->
idx
;

219 
fs
[
i
]=
cur
->
idx
;

220 
b°
->
©rs
[
i
].
©r
=
f
;

221 i‡(
f
 > 
M
.
˛ass_idx
)

222 
b°
->
©rs
[
i
].
mic
=
M
.mic[
f
][ M.
˛ass_idx
 ];

224 
b°
->
©rs
[
i
].
mic
=
M
.mic[ M.
˛ass_idx
 ][ 
f
 ];

225 
cur
=cur->
¬
;

226 
i
++;

228 
b°
->
sig
=
	`ˇl_mîô
(
fs
,b°->
numb
,
M
);

229 
	`brk_l
(
ªsu…
);

230 
	`‰ì
(
ªsu…
);

231  
b°
;

232 
	}
}

	@main.h

1 
	~"ga.h
"

2 
	~"sffs.h
"

3 
	~"fcbf.h
"

4 
	~"mic.h
"

7 
	sFótuªTy≥


9 
	m©r
;

10 
	mmic
;

11 }
	t„©yp
,*
	t·p_±r
;

13 
	sResu…Fótuªs


15 
	mnumb
;

16 
	msig
;

17 
„©yp
 *
	m©rs
;

18 }
	tªs·s
,*
	trÊ_±r
;

19 
chk_b°
(
ªs·s
 
b°
);

20 
rÊ_±r
 
gafs
(
mic_m©rix
 
M
,
psz
,
n
,
pc
,
pm
);

21 
rÊ_±r
 
sffs_rf
(
mic_m©rix
 
M
,
n
);

22 
rÊ_±r
 
fcfs_rf
(
mic_m©rix
 
M
, 
ß
);

23 
¥t_b°
(
ªs·s
 
b°
,
mic_m©rix
 
M
) ;

24 
brk_b°
(
rÊ_±r
 *
b°
);

	@mic.c

1 
	~"mic.h
"

14 
	$›a
 (
¨gc
,*
¨gv
[] )

16 
Poöts
 * 
D
=(Poöt†*)
	`mÆloc
((Points));

17 
©∫
=
	`cou¡_©r
(
¨gv
[1]);

18 
	`¥ötf
("©åibuªs:%d\n",
©∫
);

27 
D
->
Àn
=
	`cou¡_ö°
(
¨gv
[1]);

28 
	`¥ötf
("%d in°™˚s\n",
D
->
Àn
);

29 
D
->
x
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

30 
D
->
y
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

31 
D
->
grid
=(
œbñ_ty≥
 *)
	`mÆloc
(÷abñ_ty≥)*D->
Àn
);

32 
	`ªad_∑ú
(
¨gv
[1],
	`©oi
◊rgv[2]),©oi◊rgv[3]),
D
->
x
,D->
y
);

33 
Æpha
=
	`©of
(
¨gv
[4]);

34 
f
=
	`©oi
(
¨gv
[5]);

35 
ªsu…
=
	`ˇl_mic
(
D
,
Æpha
,
f
);

36 
	`‰ì
(
D
->
x
);

37 
D
->
x
=
NULL
;

38 
	`‰ì
(
D
->
y
);

39 
D
->
y
=
NULL
;

40 
	`‰ì
(
D
->
grid
);

41 
D
->
grid
=
NULL
;

42 
	`‰ì
(
D
);

43 
D
=
NULL
;

44  
ªsu…
;

45 
	}
}

48 
	$ˇl_mic_öãr
(*
fûíame
,
Poöts
 *
D
,
xa
,
yb
,
Æpha
,
f
)

50 
	`ªad_∑ú
(
fûíame
,
xa
,
yb
,
D
->
x
,D->
y
);

51 if–!
	`chk_sm
(
D
))

53  
	`ˇl_mic
(
D
,
Æpha
,
f
);

59 
	}
}

61 
	$ˇl_mic_1Æl
(*
fûíame
,
a
,
Æpha
,
f
)

63 
Poöts
 * 
D
=(Poöt†*)
	`mÆloc
((Points));

64 
©∫
=
	`cou¡_©r
(
fûíame
);

65 
	`¥ötf
("©åibuªs:%d\n",
©∫
);

66 
D
->
Àn
=
	`cou¡_ö°
(
fûíame
);

67 
	`¥ötf
("%d in°™˚s\n",
D
->
Àn
);

68 
D
->
x
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

69 
D
->
y
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

70 
D
->
grid
=(
œbñ_ty≥
 *)
	`mÆloc
(÷abñ_ty≥)*D->
Àn
);

71 
ªsu…
=0.00;

72 
i
=0;

73 
	`¥ötf
("Æpha:%f\tf:%d\n",
Æpha
,
f
);

74 
i
=0;i<
©∫
;i++)

76 
	`ªad_∑ú
(
fûíame
,
i
,
a
,
D
->
x
,D->
y
);

77 
ªsu…
=
	`ˇl_mic
(
D
,
Æpha
,
f
);

78 if(
	`EXACT
(
ªsu…
)>EXACT(1))

83 
	`¥ötf
("%d,%d,%f\n",
i
,
a
,
ªsu…
);

85 
	`‰ì
(
D
->
x
);

86 
	`‰ì
(
D
->
y
);

87 
	`‰ì
(
D
);

88 
	}
}

91 
	$chk_sm
(
Poöts
 * 
D
)

93 
i
=0;

94 
D
->
x
[
i
].
vÆ
==D->x[i+1].val)

96 
i
++;

97 if(
i
 > (
D
->
Àn
-1))

103 
i
=0;

104 
D
->
y
[
i
].
vÆ
==D->y[i+1].val)

106 
i
++;

107 if(
i
 > (
D
->
Àn
-1))

114 
	}
}

117 
	$ˇl_mic
(
Poöts
 *
D
,
Æpha
,
f
)

119 
d©a_ty≥
 *
Dx
=(d©a_ty≥ *)
	`mÆloc
((d©a_ty≥)*
D
->
Àn
);

120 
d©a_ty≥
 *
Dy
=(d©a_ty≥ *)
	`mÆloc
((d©a_ty≥)*
D
->
Àn
);

122 
	`fu
(
D
->
Àn
,D->
x
,
Dx
);

123 
	`fu
(
D
->
Àn
,D->
y
,
Dy
);

125 
	`q_s‹t
(
Dx
,
D
->
Àn
);

126 
	`q_s‹t
(
Dy
,
D
->
Àn
);

127 #ifde‡
check_d©a


128 
	`vd
 ( 
D
,
Dy
,D->
Àn
 );

131 
B
=
	`pow
(
D
->
Àn
,
Æpha
);

132 
max_B
=(()
B
/2);

133 
y
=0;

134 
x
=0;

135 **
I
=(**)
	`mÆloc
((*)*(
max_B
+1));

136 
i
=0;

137 
i
=0;i<=
max_B
;i++)

139 
I
[
i
]=(*)
	`mÆloc
(()*(
max_B
+1));

142 **
MI_xy
=(**)
	`mÆloc
((*)*(
max_B
+1));

143 **
MI_yx
=(**)
	`mÆloc
((*)*(
max_B
+1));

144 
i
=0;i<=
max_B
;i++)

146 
MI_xy
[
i
]=(*)
	`mÆloc
(()*(
max_B
+1));

147 
MI_yx
[
i
]=(*)
	`mÆloc
(()*(
max_B
+1));

149 #ifde‡
DEBUG_1


150 
	`¥ötf
("B:%d\tB/2:%d\tf:%d\èÕha:%f\n",
B
,
	`∫d
(()B/2),
f
,
Æpha
);

152 
y
=2;y<=(
B
/2);y++)

157 
x
=(
B
/
y
);

158 #ifde‡
DEBUG_1


159 
	`¥ötf
("%d\t%d\n",
x
,
y
);

161 
	`ˇl_MI
(
D
,
Dx
,
Dy
,
x
,
y
,
f
,
MI_xy
);

162 
	`ˇl_MI
(
D
,
Dy
,
Dx
,
x
,
y
,
f
,
MI_yx
);

165 **
MIC
=(**)
	`mÆloc
((* )*(
max_B
+1));

166 
i
=0;i<=
max_B
;i++)

168 
MIC
[
i
]=(*)
	`mÆloc
(()*(
max_B
+1));

170 
maxMIC
=
LOWEST
;

171 
y
=2;y<=
max_B
;y++)

173 
x
=2;x<=
max_B
;x++)

175 if(
x
*
y
<=
B
)

177 if(
	`EXACT
(
MI_xy
[
x
][
y
])>
MI_yx
[y][x]Ë
I
[x][y]=MI_xy[x][y];

178 
I
[
x
][
y
]=
MI_yx
[y][x];

179 
möxy
;

180 i‡(
x
>
y
Ë
möxy
=y;

181 
möxy
=
x
;

182 
MIC
[
x
][
y
]=()
I
[x][y]/
	`log
(
möxy
);

183 if(
	`EXACT
(
MIC
[
x
][
y
])>EXACT(
maxMIC
))

185 
maxMIC
=
MIC
[
x
][
y
];

187 #ifde‡
DEBUG_1


188 
	`¥ötf
("%10f",
MIC
[
x
][
y
]);

192 #ifde‡
DEBUG_1


193 
	`¥ötf
("\n");

196 
i
=0;i<=
max_B
;i++)

198 
	`‰ì
(
I
[
i
]);

199 
I
[
i
]=
NULL
;

200 
	`‰ì
(
MI_yx
[
i
]);

201 
MI_yx
[
i
]=
NULL
;

202 
	`‰ì
(
MI_xy
[
i
]);

203 
MI_xy
[
i
]=
NULL
;

204 
	`‰ì
(
MIC
[
i
]);

205 
MIC
[
i
]=
NULL
;

207 
	`‰ì
(
I
);

208 
I
=
NULL
;

209 
	`‰ì
(
MI_xy
);

210 
MI_xy
=
NULL
;

211 
	`‰ì
(
MI_yx
);

212 
MI_yx
=
NULL
;

213 
	`‰ì
(
MIC
);

214 
MIC
=
NULL
;

215 
	`‰ì
(
Dx
);

216 
Dx
=
NULL
;

217 
	`‰ì
(
Dy
);

218 
Dy
=
NULL
;

220  
maxMIC
;

221 
	}
}

223 
	$ˇl_MI
(
Poöts
 *
D
,
d©a_ty≥
 * 
Dx
,d©a_ty≥ * 
Dy
,
x
 ,
y
, 
f
,**
MI
)

226 
	`eqpY
 (
D
, 
Dy
,D->
Àn
,
y
);

230 
s˛n
=0;

231 
s˛n
=
	`eqpX
 (
D
,
Dx
,
Dy
,D->
Àn
,
x
,
y
,
f
);

234 **
rs
=(**)
	`mÆloc
((*)*
y
);

235 if(
rs
==
NULL
)

237 
	`puts
("Ñs Memory malloc Error!ExitÇow.");

238 
	`exô
(0);

241 
i
=0;

242 
j
=0;

243 
i
=0;i<
y
;i++)

245 
rs
[
i
]=(*)
	`mÆloc
(()*(
s˛n
+1));

246 
j
=0;j<
s˛n
+1;j++)

248 
rs
[
i
][
j
]=0;

251 
	`gdrs
(
D
,
rs
);

254 
	`O±x
(
x
,
y
,
s˛n
,
rs
,
MI
);

256 
i
=0;i<
y
;i++)

258 #ifde‡
DEBUG_1


259 
	`¥ötf
("rs[%d][%d]:%d\t",
i
,
j
,
rs
[i][j]);

261 
	`‰ì
(
rs
[
i
]);

262 
rs
[
i
]=
NULL
;

264 
	`‰ì
(
rs
);

265 
rs
=
NULL
;

266 
	}
}

270 
	$O±x
(
x
,
y
, 
˛mn
, **
rs
, **
MI
)

272 **
Hpq
=(**)
	`mÆloc
((
˛mn
+1)*(*));

273 **
H°
=(**)
	`mÆloc
((
˛mn
+1)*(*));

274 **
Ai
=(**)
	`mÆloc
((
˛mn
+1)*(*));

275 *
Hq
=(*)
	`mÆloc
(());

277 
i
=0;

278 
i
=0;i<=
˛mn
;i++)

280 
Hpq
[
i
]=(*)
	`mÆloc
((
˛mn
+1)*());

281 
H°
[
i
]=(*)
	`mÆloc
((
˛mn
+1)*());

282 
Ai
[
i
]=(*)
	`mÆloc
((
˛mn
+1)*());

283 
j
=0;

284 
j
=0;j<=
˛mn
;j++)

286 
Hpq
[
i
][
j
]=0;

287 
H°
[
i
][
j
]=0;

288 
Ai
[
i
][
j
]=0;

291 #ifde‡
DEBUG_1


292 
	`¥ötf
("%d\t%d\t%d\n",
x
,
y
,
˛mn
);

295 
	`h°
(
˛mn
,
y
,
rs
,
Hpq
,
H°
,
Ai
,
Hq
);

297 *
F
=(*)
	`mÆloc
(()*(
˛mn
+1));

298 
i
=0;i<=
˛mn
;i++)

300 
F
[
i
]=0;

302 
t
=0;

303 
s
=0;

304 
k
=
˛mn
;

305 
f
=0.00;

307 *
ç
=(*)
	`mÆloc
(()*(
k
+1));

308 
l
=0;

309 #ifde‡
DEBUG_1


310 
	`¥ötf
("Normalized : [ ");

312 
l
=2;l<=
x
;l++)

314 
t
=
l
;t<=
k
;t++)

316 
fmax
=
LOWEST
;

317 
s
=
l
-1;s<
t
;s++)

319 if(
l
>2)

321 
f
=
Ai
[
s
][
t
]*
F
[s]+
H°
[s][t];

325 
f
=
Hpq
[
s
][
t
];

328 if(
	`EXACT
(
f
)>EXACT(
fmax
))

330 
fmax
=
f
;

333 
ç
[
t
]=
fmax
;

336 
i
=0;i<=
k
;i++)

338 
F
[
i
]=
ç
[i];

340 
MI
[
l
][
y
]=
F
[
k
]+(*
Hq
);

341 #ifde‡
DEBUG_1


342 
	`¥ötf
("%10f\t",
MI
[
l
][
y
]/
	`log
(
	`MIN
(l,y)));

346 #ifde‡
DEBUG_1


347 
	`¥ötf
(" ]\n \n");

351 
i
=0;i<=
˛mn
;i++)

353 
	`‰ì
(
Hpq
[
i
]);

354 
Hpq
[
i
]=
NULL
;

355 
	`‰ì
(
H°
[
i
]);

356 
H°
[
i
]=
NULL
;

357 
	`‰ì
(
Ai
[
i
]);

358 
Ai
[
i
]=
NULL
;

360 
	`‰ì
(
Hpq
);

361 
Hpq
=
NULL
;

362 
	`‰ì
(
H°
);

363 
H°
=
NULL
;

364 
	`‰ì
(
Ai
);

365 
Ai
=
NULL
;

366 
	`‰ì
(
Hq
);

367 
Hq
=
NULL
;

368 
	`‰ì
(
F
);

369 
F
=
NULL
;

370 
	`‰ì
(
ç
);

371 
ç
=
NULL
;

372 
	}
}

375 
	$h°
(
˛mn
,
y
,**
rs
,**
Hpq
,**
H°
,**
Ai
,*
Hq
)

377 
i
=0;

378 
j
=0;

380 *
xq
=(*)
	`mÆloc
(()*
˛mn
);

381 
i
=0;i<
˛mn
;i++)

383 
xq
[
i
]=0;

385 
c
=0;

386 
sum
=0;

387 
i
=0,
c
=0;i<
˛mn
;i++)

389 
j
=0;j<
y
;j++)

392 
sum
+=
rs
[
j
][
i
];

394 
xq
[
c
++]=
sum
;

397 ** 
yp
=(**)
	`mÆloc
((*)*
˛mn
);

398 
i
=0;i<
˛mn
;i++)

400 
yp
[
i
]=(*)
	`mÆloc
(()*
y
);

401 
j
=0;j<
y
;j++)

403 
yp
[
i
][
j
]=0;

406 #ifde‡
DEBUG_1


407 
	`¥ötf
("sum:%d\nyáxi†∑πôi⁄: [ ",
sum
);

409 
j
=0;j<
y
;j++)

412 
sum
=0;

413 
i
=0;i<
˛mn
;i++)

416 
sum
+=
rs
[
j
][
i
];

417 
yp
[
i
][
j
]=
sum
;

420 #ifde‡
DEBUG_1


421 
	`¥ötf
("%d->%d\t",
j
,
yp
[
˛mn
-1][j]);

425 #ifde‡
DEBUG_1


426 
	`¥ötf
(" ] \n");

429 *
Hq
=0.00;

430 
i
=0;i<
y
;i++)

432 
°i
=
yp
[
˛mn
-1][
i
];

433 
°
=
xq
[
˛mn
-1];

434 
p1
=()
°i
/
°
;

435 if(
p1
)

437 (*
Hq
)-=()
p1
*
	`log
(p1);

441 
t
=0;

442 
s
=0;

443 
k
=
˛mn
;

444 
t
=2;t<=
k
;t++)

446 
s
=1;s<
t
;s++)

448 
i
=0;i<
y
;i++)

451 
m
=
xq
[
t
-1];

452 
jl
=
xq
[
s
-1];

453 
jr
=
xq
[
t
-1]-xq[
s
-1];

454 
c1
=
yp
[
s
-1][
i
];

455 
c2
=
yp
[
t
-1][
i
]-yp[
s
-1][i];

457 
p1
=()
c1
/
m
;

458 
p2
=()
c2
/
m
;

459 
p3
=()
c1
/
jl
;

460 
p4
=()
c2
/
jr
;

461 if(
c1
>0)

463 
Hpq
[
s
][
t
]+=()
p1
*
	`log
(
p3
);

465 if(
c2
>0)

467 
Hpq
[
s
][
t
]+=()
p2
*
	`log
(
p4
);

470 
¶
=
xq
[
t
-1]-xq[
s
-1];

471 
û
=
yp
[
t
-1][
i
]-yp[
s
-1][i];

472 
p1
=()
¶
/
m
;

473 
p2
=()
û
/
¶
;

474 if(
û
>0)

476 
H°
[
s
][
t
]+=
p2
*
	`log
(p2);

479 
m
=
xq
[
t
-1];

480 
¶1
=
xq
[
s
-1];

481 
¶
=
xq
[
t
-1]-xq[
s
-1];

482 
p
=()
¶
/
m
;

483 
H°
[
s
][
t
]=()H°[s][t]*
p
;

484 
Ai
[
s
][
t
]=()
¶1
/
m
;

487 #ifde‡
DEBUG_1


488 
	`¥ötf
("HQ:%f\n",*
Hq
);

490 
i
=0;i<
˛mn
;i++)

492 
	`‰ì
(
yp
[
i
]);

493 
yp
[
i
]=
NULL
;

495 
	`‰ì
(
yp
);

496 
yp
=
NULL
;

497 
	`‰ì
(
xq
);

498 
xq
=
NULL
;

499 
	}
}

502 
	$gdrs
(
Poöts
 *
D
 ,** 
rs
 )

504 
i
=0;

505 
i
=0;i< 
D
->
Àn
;i++)

507 
rs
[
D
->
grid
[
i
].
∫
][D->grid[i].
˙
]+=1;

508 #ifde‡
DEBUG_1


509 
	`¥ötf
("i:%d\ån:%d\t˙:%d\ås:%d\n",
i
,
D
->
grid
[i].
∫
,D->grid[i].
˙
,
rs
[D->grid[i].rn][D->grid[i].cn]);

513 
	}
}

516 
	$eqpX
 (
Poöts
 *
D
,
d©a_ty≥
 * 
Dx
, d©a_ty≥ *
Dy
, 
l
, 
x
, 
y
, 
f
)

519 
i
=0;

520 
˛mn
=
f
*
x
;

521 
scz
=(()
l
/
˛mn
);

522 
c
=0;

523 
sci
=0;

525 #ifde‡
DEBUG_1


526 
	`¥ötf
("Desúed size:%f\n",
scz
);

527 
	`¥ötf
("ClumpsÖartition: [ ");

529 
i
<
l
)

531 
t
=0;

532 
sc
=1;

534 
D
->
grid
[
Dx
[
i
].
pos
].
˙
=
c
;

535 
SMR
=1;

536 
SMX
=1;

537 
t
=1;
i
+t<
l
;t++)

539 if(!
	`smr
(
D
,
Dx
,
i
,i+
t
))

541 
SMR
=0;

543 if(!
	`smx
(
Dx
,
i
,i+
t
))

545 if(!
SMR
)

549 
SMX
=0;

551 if(!
SMX
&&!
	`smr
(
D
,
Dx
,
i
,i+
t
))

556 
sc
=
t
;

557 #ifde‡
eqpx


558 
	`¥ötf
("nowÅ :%d,i+t:%d\n",
t
,
i
+t);

561 if(!
SMX
&&
Dx
[
i
+
t
-1].
vÆ
==Dx[i+t].val)

563 
j
=0;

564 
j
=
i
+
t
-1;j>i;)

566 if((
Dx
[
i
+
t
-1].
vÆ
)==(Dx[
j
].val))

568 
j
-=1;

569 
sc
-=1;

577 #ifde‡
eqpx


578 
	`¥ötf
("a·î cuâög sc:%d,i+sc:%d,vÆ:%f\n",
sc
,
i
+sc,
Dx
[i+sc].
vÆ
);

581 
idx
=1;

582 
idx
<=
sc
)

584 
D
->
grid
[
Dx
[
i
+
idx
-1].
pos
].
˙
=
c
;

585 
idx
+=1;

587 
sci
+=
sc
;

588 if((
	`Ábs
(
sci
+
sc
-
scz
)>=fabs(sci-scz))&&(sci))

590 
sci
=0;

591 if(
˛mn
-
c
-1==0)

593 
scz
=
l
;

595 
scz
=()((
l
-
i
)/(
˛mn
-
c
-1));

596 
c
++;

598 
i
+=
sc
;

600 #ifde‡
DEBUG_1


601 
	`¥ötf
("%d ]\n",
i
-1);

603  (
c
);

604 
	}
}

607 
	$smr
 (
Poöts
 *
D
,
d©a_ty≥
 *
sdx
,
a
,
b
)

609 if(
D
->
grid
[
sdx
[
a
].
pos
].
∫
!=D->grid[sdx[
b
].pos].rn)

615 
	}
}

616 
	$smx
 (
d©a_ty≥
 *
sdx
,
a
,
b
)

618 if(
sdx
[
a
].
vÆ
==sdx[
b
].val)

626 
	}
}

628 
	$eqpY
 (
Poöts
 *
D
, 
d©a_ty≥
 * 
Dy
 ,
l
, 
y
 )

630 
i
=0;

631 
s
=0;

632 
c
=0;

633 
bi
=0;

634 
bsz
=()
l
/
y
;

635 
≈
=0;

636 #ifde‡
DEBUG_eqpy


637 
	`¥ötf
("Inôü»bsz:%f\n",
bsz
);

639 
i
<
l
)

641 
s
=0;

642 
s
=0;s+
i
<
l
;)

644 if(
Dy
[
i
].
vÆ
==Dy[i+
s
].val)

646 
s
+=1;

651 #ifde‡
DEBUG_eqpy


652 
	`¥ötf
("bi:%d,s:%d,bsz:%f,abs(bi+s-bsz):%f\n",
bi
,
s
,
bsz
,
	`Ábs
(bi+s-bsz));

653 
	`¥ötf
("bi:%d,bsz:%f,abs(bi-bsz):%f",
bi
,
bsz
,
	`Ábs
(bi-bsz));

655 if(
	`Ábs
(
bi
+
s
-
bsz
)>=fabs(bi-bsz)&&bi)

657 
bi
=0;

658 
c
++;

659 
bsz
=()(
l
-
≈
)/(
y
-
c
);

660 #ifde‡
DEBUG_eqpy


661 
	`¥ötf
("bªakÖoöt:c:%d\tbsz:%f\ti:%d≈:%d,s:%d,vÆ:%f\n",
c
,
bsz
,
i
,
≈
,
s
,
Dy
[i].
vÆ
);

664 
k
=0;

665 
k
=0;k<
s
;k++)

667 
D
->
grid
[
Dy
[
i
+
k
].
pos
].
∫
=
c
;

669 
≈
+=
s
;

670 
bi
+=
s
;

671 
i
+=
s
;

673 #ifde‡
DEBUG_eqpy


674 
i
=0;

675 
i
<
l
)

677 
	`¥ötf
("i:%d\ty:%f\ån:%d\n",
i
,
Dy
[i].
vÆ
,
D
->
grid
[Dy[i].
pos
].
∫
);

678 
i
+=1;

681 
	}
}

684 
	$vyp
 ( 
y
 , * 
yp
 )

686 
i
=0;

687 
	`¥ötf
("Index\tPosition\tNumber\n");

688 
i
=0;i<
y
;i++)

690 
	`¥ötf
("%d\t%d\t",
i
,
yp
[i]);

691 if(
i
>0)

693 
	`¥ötf
("%d\n",
yp
[
i
]-yp[i-1]);

697 
	`¥ötf
("%d\n",
yp
[
i
]+1);

701 
	}
}

704 
	$gd
 (
Poöts
 * 
D
 )

706 
i
=0;

707 
i
 < 
D
->
Àn
)

709 
D
->
x
[
i
].
pos
=i;

710 
D
->
y
[
i
].
pos
=i;

712 
D
->
x
[
i
].
vÆ
=i*
PI
/2.00;

713 
D
->
y
[
i
].
vÆ
=
	`sö
(D->
x
[i].val);

715 
D
->
x
[
i
].
vÆ
=
	`EXACT
(D->x[i].val);

716 
D
->
y
[
i
].
vÆ
=
	`EXACT
(D->y[i].val);

717 if(
Debug
>
LEVEL_1
)

719 
	`¥ötf
("%d:\t%f\t%f\n",
i
,
D
->
x
[i].
vÆ
,D->
y
[i].val);

721 
i
++;

733 if(
CHECK_DATA
==1)

735 
i
=0;

736 
	`¥ötf
("Index,Value\n");

737 
i
=0;i<
D
->
Àn
;i++)

739 
	`¥ötf
("%f,%f\n",
D
->
x
[
i
].
vÆ
,D->
y
[i].val);

742 
	}
}

745 
	$fu
 (
Àn
 ,
d©a_ty≥
 *
SRC_DA
,d©a_ty≥ *
DES_DB
 )

747 
i
=0;

748 
i
=0;i<
Àn
;i++)

750 
DES_DB
[
i
].
vÆ
=
SRC_DA
[i].val;

751 
DES_DB
[
i
].
pos
=
SRC_DA
[i].pos;

753 
	}
}

756 
	$vd
 (
Poöts
 *
D
,
d©a_ty≥
 * 
sdx
, 
l
)

758 
i
=0;

759 
	`puts
("\n");

760 
i
=0;i<
l
;i++)

762 
Êag
=0;

763 if(
i
+1<
l
)

766 if(
sdx
[
i
].
vÆ
==sdx[i+1].val)

768 
Êag
=1;

771 
	`¥ötf
("%d\t%lf\t%lf\t%d\n",
i
,
sdx
[i].
vÆ
,
D
->
x
[sdx[i].
pos
].vÆ,
Êag
);

773 
	}
}

776 
	$∫d
 ( 
x
 )

778  
	`Êo‹
((
x
*10+4)/10.00);

779 
	}
}

783 
	$q_s‹t
 ( 
d©a_ty≥
 * 
sd
, 
l
 )

785 
À·
=0;

786 
right
=
l
-1;

787 
	`qs
(
sd
 ,
À·
 , 
right
 );

789 
	}
}

790 
	$qs
 (
d©a_ty≥
 *
sd
 ,
À·
 , 
right
 )

792 if(
À·
<
right
)

794 
m
=
	`p_qs
(
sd
,
À·
,
right
);

795 
	`qs
(
sd
,
À·
,
m
-1);

796 
	`qs
(
sd
,
m
+1,
right
);

799 
	}
}

800 
	$p_qs
 (
d©a_ty≥
 *
sd
,
À·
,
right
)

802 
t
=
sd
[
À·
].
vÆ
;

803 
b
=
À·
,
i
;

804 
i
=
À·
;i<=
right
;i++)

806 if(
sd
[
i
].
vÆ
<
t
)

808 
b
++;

809 
	`sw≠
(
sd
,
b
,
i
);

813 
	`sw≠
(
sd
,
b
,
À·
);

814  
b
;

815 
	}
}

816 
	$sw≠
 (
d©a_ty≥
 * 
sd
,
a
,
b
)

818 
d©a_ty≥
 
ãmp
=
sd
[
a
];

819 
sd
[
a
]=sd[
b
];

820 
sd
[
b
]=
ãmp
;

821 
	}
}

824 
	$ªad_∑ú
(*
fûíame
,
xa
,
yb
,
d©a_ty≥
 *
x
,d©a_ty≥ *
y
)

826 
FILE
 * 
§c
=
	`f›í
(
fûíame
,"r");

827 if(!
§c
)

829 
	`¥ötf
("Fûê%†›íÉº‹!\n",
fûíame
);

830 
	`exô
(1);

833 
	`Ω
(
§c
,
xa
,
yb
,
x
,
y
);

835 
	`f˛o£
(
§c
);

837 
	}
}

840 
	$cou¡_ö°
(* 
fûíame
)

842 
FILE
 * 
§c

	`f›í
(
fûíame
,"r");

843 if(!
§c
)

845 
	`¥ötf
("Fûê%†›íÉº‹!\n",
fûíame
);

846 
	`ußge
();

847 
	`exô
(1);

850 
ö°
=0;

851 *
tmp
=(*)
	`mÆloc
(()*
bufsize
);

852 
	`f£ek
(
§c
,0,
SEEK_SET
);

853 
	`fgës
(
tmp
,
bufsize
,
§c
);

854 
	`fgës
(
tmp
,
bufsize
,
§c
))

856 ++
ö°
;

858 
	`f˛o£
(
§c
);

859  
ö°
;

860 
	}
}

863 
	$cou¡_©r
(*
fûíame
)

865 
FILE
 * 
§c
 =
	`f›í
(
fûíame
,"r");

866 *
l
=(*)
	`mÆloc
(()*
bufsize
);

868 if(!
§c
)

870 
	`puts
("File openÉrror!");

871 
	`ußge
();

872 
	`exô
(1);

874 
©∫
;

875 
	`fgës
(
l
,
bufsize
,
§c
);

876 if(
	`fgës
(
l
,
bufsize
,
§c
))

878 *
ç
=
l
;

879 
©∫
=0;

880 !(*
ç
=='\0'||*tp=='\n'))

882 !
	`isdigô
(*
ç
)&&!(*tp=='\0'||*tp=='\n'))

884 
ç
++;

887 if(*
ç
=='\0'||*tp=='\n')

889 
	`‰ì
(
l
);

890 
	`f˛o£
(
§c
);

891  
©∫
;

893 
©∫
++;

894 
	`°πod
(
ç
,&tp);

895 
ç
++;

898 
	`‰ì
(
l
);

899 
	`f˛o£
(
§c
);

900  
©∫
;

901 
	}
}

904 
	$Ω
(
FILE
 * 
§c
,
xa
 ,
yb
, 
d©a_ty≥
 *
x
 ,d©a_ty≥ *
y
)

906 
i
=0;

907 
j
=0;

908 *
lc
=(*)
	`mÆloc
(()*
bufsize
);

909 *
ç
;

910 
çn
;

911 
çn
=0.00;

913 
	`f£ek
(
§c
,0,
SEEK_SET
);

914 
	`fgës
(
lc
,
bufsize
,
§c
);

915 
	`fgës
(
lc
,
bufsize
,
§c
))

917 
i
=0;

918 
ç
=
lc
;

919 *
ç
!='\0'&&*tp!='\n')

921 
çn
=
	`°πod
(
ç
,&tp);

922 if(
i
==
xa
)

924 
x
[
j
].
vÆ
=
çn
;

925 
x
[
j
].
pos
=j;

927 if(
i
==
yb
)

929 
y
[
j
].
vÆ
=
çn
;

930 
y
[
j
].
pos
=j;

932 
ç
++;

933 
i
++;

935 
j
++;

937 
	`‰ì
(
lc
);

938 
lc
=
NULL
;

939 
	}
}

941 
	$ck∑
(
¨gc
,*
¨gv
[],
©∫
)

943 if(
	`ck_n
(
¨gc
,7)&&
	`ck_f
(
¨gv
[2])&&
	`ck_i
(
	`©oi
◊rgv[3]),©oi◊rgv[4]),
©∫
)&&
	`ck_e
(
	`©of
(argv[5])) )

951 
	}
}

	@mic.h

1 #i‚de‡
MIC_H


2 
	#MIC_H


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<m©h.h
>

7 
	~<Êﬂt.h
>

8 
	~<˘y≥.h
>

9 
	~"∑ø_chk.h
"

13 
	#Debug
 7

	)

14 
	#LEVEL_1
 3

	)

15 
	#LEVEL_2
 5

	)

16 
	#LEVEL_3
 4

	)

17 
	#PI
 3.1415926

	)

18 
	#LOWEST
 -
FLT_MAX


	)

19 
	#CHECK_DATA
 0

	)

20 
	#bufsize
 100000

	)

21 
	#EXACT
(
x
Ë((
Êo‹
)(x*1000000))/1000000

	)

28 #i‡(
CHECK_DATA
==1)

29 #unde‡
Debug


30 
	#Debug
 0

	)

33 
	sPoöt


35 
	mvÆ
;

36 
	mpos
;

37 }
	td©a_ty≥
;

39 
	sLabñ


42 
	m∫
;

44 
	m˙
;

45 }
	tœbñ_ty≥
;

47 
	sD©aSë


49 
d©a_ty≥
 * 
	mx
;

50 
d©a_ty≥
 * 
	my
;

51 
œbñ_ty≥
 * 
	mgrid
;

52 
	mÀn
;

53 }
	tPoöts
;

57 
gd
 ( 
Poöts
 * 
D
);

58 
eqpY
 ( 
Poöts
 *
D
, 
d©a_ty≥
 * 
Dy
,
l
,
y
 );

59 
q_s‹t
–
d©a_ty≥
 * 
sd
, 
l
 );

60 
qs
(
d©a_ty≥
 *
sd
 ,
À·
 , 
right
 );

61 
p_qs
(
d©a_ty≥
 *
sd
,
À·
,
right
);

62 
sw≠
(
d©a_ty≥
 * 
sd
,
a
,
b
);

63 
vd
(
Poöts
 * 
D
,
d©a_ty≥
 *
sdx
 ,
l
);

64 
vyp
 ( 
y
 , * 
yp
 );

65 
∫d
–
x
 );

66 
eqpX
 (
Poöts
 *
D
,
d©a_ty≥
 * 
Dx
,d©a_ty≥ *
Dy
, 
l
, 
x
, 
y
, 
f
);

67 
˛mX
 ( 
d©a_ty≥
 * 
Dx
, 
l
, 
x
, 
y
, 
f
, *
˛m
 );

68 
smr
(
Poöts
 *
D
,
d©a_ty≥
 *
sdx
,
a
,
b
);

69 
smx
 (
d©a_ty≥
 *
sdx
,
a
,
b
);

70 
smc
(
d©a_ty≥
 *
sdx
,
a
 ,
b
,
˛mn
,* 
˛m
);

71 
fu
(
Àn
 ,
d©a_ty≥
 *
SRC_DA
,d©a_ty≥ *
DES_DB
 );

72 
gdrs
(
Poöts
 *
D
 ,** 
rs
 );

73 
bub_s‹t
(
d©a_ty≥
 *
sd
, 
l
);

74 
h°
(
˛mn
,
y
,** 
rs
,** 
Hpq
,**
H°
,**
Ai
,*
Hq
);

75 
O±x
(
x
,
y
, 
˛mn
, **
rs
, **
MI
);

76 
ˇl_MI
(
Poöts
 *
D
,
d©a_ty≥
 * 
Dx
,d©a_ty≥ * 
Dy
,
x
 ,
y
, 
f
,**
MI
);

77 
cou¡_©r
(* 
fûíame
);

78 
cou¡_ö°
(* 
fûíame
);

79 
Ω
(
FILE
 * 
§c
,
xa
, 
yb
,
d©a_ty≥
 *
x
,d©a_ty≥ *
y
);

80 
ªad_∑ú
(* 
fûíame
,
xa
,
yb
,
d©a_ty≥
 *
x
,d©a_ty≥ *
y
);

81 
chk_sm
(
Poöts
 * 
D
);

83 
ck∑
(
¨gc
,*
¨gv
[],
©∫
);

84 
ˇl_mic_öãr
(*
fûíame
,
Poöts
 *
D
,
xa
,
yb
,
Æpha
,
f
);

86 
›a
 (
¨gc
,*
¨gv
[] );

87 
ˇl_mic
(
Poöts
 *
D
,
Æpha
,
f
);

88 
ˇl_mic_1Æl
(*
fûíame
,
a
,
Æpha
,
f
);

91 
	~"ªad_c⁄ã¡.h
"

	@mic_matrix.c

1 
	~"mic_m©rix.h
"

2 
	$fûl_mic_m©rix
(*
‚m
,
mic_m©rix
 *
M
,
exp
,
f
)

4 
M
->
©∫
=
	`cou¡_©r
(
‚m
);

5 
M
->
˛ass_idx
=M->
©∫
-1;

6 #ifde‡
debug_fûl_mic


7 
	`¥ötf
("©∫:%d\t˛ass_idx:%d\n",
M
->
©∫
,M->
˛ass_idx
);

9 
M
->
mic
=
	`ªad_mic_m©rix
(
‚m
);

10 
	}
}

16 ** 
	$ªad_mic_m©rix
(*
‚m
)

18 
©∫
=
	`cou¡_©r
(
‚m
);

19 **
mic_m©rix
=(**)
	`mÆloc
((*)*(
©∫
));

20 if(
mic_m©rix
==
NULL
)

22 
	`¥ötf
("MemoryÉrror mic_matrix!\n");

24 
i
=0;

25 
j
=0;

26 
mic_m©rix
[0]=
NULL
;

27 
i
=1;i<=
©∫
-1;i++)

29 
mic_m©rix
[
i
]=(*)
	`mÆloc
(()*(i));

30 if(
mic_m©rix
[
i
]==
NULL
)

32 
	`¥ötf
("MemoryÉrror mic_matrix!\n");

34 
j
=0;j<
i
;j++)

36 
	`sˇnf
("%f",&
mic_m©rix
[
i
][
j
]);

39  
mic_m©rix
;

40 
	}
}

42 ** 
	$ˇl_mic_m©rix
(*
‚m
,
Æpha
,
f
)

44 
f˘
 
fûe_c⁄ã¡
;

45 
fûe_c⁄ã¡
.
‚
=
‚m
;

46 
	`ªad_c⁄ã¡
(&
fûe_c⁄ã¡
);

47 
Poöts
 * 
D
=(Poöt†*)
	`mÆloc
((Points));

48 
©∫
=
	`cou¡_©r
(
‚m
);

49 
D
->
Àn
=
	`cou¡_ö°
(
‚m
);

50 
D
->
x
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

51 
D
->
y
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

52 
D
->
grid
=(
œbñ_ty≥
 *)
	`mÆloc
(÷abñ_ty≥)*D->
Àn
);

53 **
mic_m©rix
=(**)
	`mÆloc
((*)*(
©∫
));

54 
i
=0;

55 
j
=0;

56 
mic_m©rix
[0]=
NULL
;

57 
i
=1;i<=
©∫
-1;i++)

59 
mic_m©rix
[
i
]=(*)
	`mÆloc
(()*(i));

60 
j
=0;j<
i
;j++)

62 
mic_m©rix
[
i
][
j
]=
	`mic_˘_mem
(
fûe_c⁄ã¡
,
D
,i,j,
Æpha
,
f
);

65 
	`‰ì
(
D
->
grid
);

66 
	`‰ì
(
D
->
x
);

67 
	`‰ì
(
D
->
y
);

68 
	`‰ì
(
D
);

69 
i
=0;i<
©∫
;i++)

71 
	`‰ì
(
fûe_c⁄ã¡
.
˘
[
i
]);

73 
	`‰ì
(
fûe_c⁄ã¡
.
˘
);

74  
mic_m©rix
;

75 
	}
}

78 
	$ˇl_mîô
(*
l°
,
l
,
mic_m©rix
 
M
)

80 
i
=0;

81 
j
=0;

82 
rfc
=0.00;

83 
rff
=0.00;

84 #ifde‡
debug_ˇl_mîô


85 
	`¥ötf
("Debug cÆ_mîô wôh %d membîs.\n",
l
);

87 
	`¥ötf
("mîô1:%f\tmîô2:%f\é°_i[%d]:%d,l°_j[%d]:%d\n",
M
.
mic
[M.
˛ass_idx
][
l°
[
i
] ],M.mic[M.˛ass_idx][l°[
j
] ],i,lst[i],j,lst[j] );

89 if(
l
==0)

93 if(
l
==1)

95  
M
.
mic
[M.
˛ass_idx
][
l°
[
i
]];

98 
i
=1;i<
l
;i++)

100 
rfc
+=
M
.
mic
[ M.
˛ass_idx
 ][ 
l°
[
i
] ];

101 #ifde‡
debug_ˇl_mîô_dìp


102 
	`¥ötf
("l°[%d]:%d,rfc,mic:%f\n",
i
,
l°
[i],
M
.
mic
[ 
	`MAX
÷°[i],M.
˛ass_idx
Ë][ 
	`MIN
(lst[i],M.class_idx) ]);

104 
j
=0;j<
i
;j++)

106 #ifde‡
debug_ˇl_mîô_dìp


107 
	`¥ötf
("ˇl_mîô->l°[%d]:%d\é°[%d]:%d\n",
i
,
l°
[i],
j
,lst[j] );

109 i‡(
l°
[
i
]>l°[
j
])

111 
rff
+=
M
.
mic
[ 
l°
[
i
] ][Ü°[
j
] ];

115 
rff
+=
M
.
mic
[ 
l°
[
j
] ][Ü°[
i
] ];

119 
rfc
=()‘fc/
l
);

120 
rff
=()‘ff/()(
l
*(l-1)));

121 
ªt
=()(
rfc
*
l
)/
	`sqπ
÷+l*÷-1)*(
rff
));

122 #ifde‡
debug_ˇl_mîô


123 
	`¥ötf
("föÆÑf‡:%f,rf¯:%f,Ñë:%f\n",
rff
,
rfc
,
ªt
);

125  
ªt
;

126 
	}
}

128 
	$check_mic_m©rix
(
mic_m©rix
 
M
)

130 
i
=0;

131 
j
=0;

132 
	`puts
("Begin mic_matrix check:");

133 
	`¥ötf
("˛ass_idx:%d\èån:%d\n",
M
.
˛ass_idx
,M.
©∫
);

134 
i
=0;i<
M
.
©∫
;i++)

136 
j
=0;j<
i
;j++)

138 
	`¥ötf
("%d:%d->%f\t",
i
,
j
,
M
.
mic
[i][j]);

140 
	`puts
("");

142 
	`puts
("mic_matrix check over!");

144 
	}
}

145 
	$check_¨ry
(* 
l
,
a
)

147 
i
=0;

148 
i
<
a
)

150 
	`¥ötf
("%d\t",
l
[
i
++]);

152 
	`puts
("Check OVER!!");

153 
	}
}

	@mic_matrix.h

1 #i‚de‡
MIC_MATRIX


2 
	#MIC_MATRIX


	)

3 
	~"mic.h
"

5 
	sMicM©rix


7 
	m˛ass_idx
;

8 
	m©∫
;

9 **
	mmic
;

10 }
	tmic_m©rix
;

11 
ˇl_mîô
(*
l°
,
l
,
mic_m©rix
 
M
);

12 
fûl_mic_m©rix
(*
‚m
,
mic_m©rix
 *
M
,
exp
,
f
);

13 ** 
ˇl_mic_m©rix
(*
‚m
,
Æpha
,
f
);

14 ** 
ªad_mic_m©rix
(*
‚m
);

15 
check_mic_m©rix
(
mic_m©rix
 
M
);

16 
check_¨ry
(*
l
,
a
);

	@micfs.c

1 
	~"mic.h
"

2 
	~"micfs.h
"

4 
	$micfs_maö
(
¨gc
,*
¨gv
[])

6 
©∫
=
	`cou¡_©r
(
¨gv
[2]);

7 
Êag
=
	`∑ø_chk
(
¨gc
,
¨gv
,
©∫
);

8 if(
Êag
==0)

10 
	`puts
("Program willÉxitÇow !");

11 
	`exô
(0);

13 * 
fûíame
=
¨gv
[2];

14 
Poöts
 * 
D
=(Poöt†*)
	`mÆloc
((Points));

15 
D
->
Àn
=
	`cou¡_ö°
(
fûíame
);

16 
D
->
x
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

17 
D
->
y
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

18 
D
->
grid
=(
œbñ_ty≥
 *)
	`mÆloc
(÷abñ_ty≥)*D->
Àn
);

20 if(
Êag
==1)

22 
	`puts
("MIC only mode !");

23 
MIC
=
	`ˇl_mic_öãr
(
fûíame
,
D
,
	`©oi
(
¨gv
[3]),©oi◊rgv[4]),
	`©of
(argv[5]),atoi(argv[6]));

24 
	`¥ötf
("%f\n",
MIC
);

26 if(
Êag
==2)

28 
	`puts
("MIC-FS module begin...");

29 
li°
 * 
bé
=
	`micfs
(
fûíame
,
D
,
	`©of
(
¨gv
[3]),
	`©oi
(argv[4]));

30 
	`¥ötf
("Feature selectionÖart successfully finished ! \n");

31 
li°_node
 *
ç
=
bé
->
hódî
;

33 
FILE
 *
fsf
=
	`f›í
("selected_features.csv","w+");

34 *
fbf
=(*)
	`mÆloc
(()*200);

35 
ç
)

37 
	`•rötf
(
fbf
,"%d,%f\n",
ç
->
idx
,ç->
mic
);

38 
	`Âuts
(
fbf
,
fsf
);

39 
ç
Òp->
¬
;

41 
	`f˛o£
(
fsf
);

42 
	`‰ì
(
fbf
);

43 
	`brk_l
(
bé
);

46 
	}
}

49 
li°
 * 
	$micfs
(*
fûíame
,
Poöts
 * 
D
,
Æpha
,
f
)

51 
©∫
=
	`cou¡_©r
(
fûíame
);

52 
	`¥ötf
("©∫:%d\éí:%d\n",
©∫
,
D
->
Àn
);

53 
d©a_ty≥
 *
MICS
=(d©a_ty≥ *)
	`mÆloc
((d©a_ty≥)*(
©∫
-1));

54 
i
=0;

57 
FILE
 * 
fo
=
	`f›í
("cmic.csv","w+");

58 * 
sbf
=(*)
	`mÆloc
(()*(300));

61 
i
=0;i+1<
©∫
;i++)

64 
MICS
[
i
].
vÆ
=
	`ˇl_mic_öãr
(
fûíame
,
D
,
©∫
-1,i,
Æpha
,
f
);

65 
	`•rötf
(
sbf
,"%d,%f\n",
i
,
MICS
[i].
vÆ
);

66 if(
MICS
[
i
].
vÆ
)

68 
	`Âuts
(
sbf
,
fo
);

70 
MICS
[
i
].
pos
=i;

72 
	`¥ötf
("alláttributes's micÅo class over !\n");

73 
	`f˛o£
(
fo
);

74 
	`‰ì
(
sbf
);

77 
	`q_s‹t
(
MICS
,
©∫
-1);

80 
li°
 *
l°
=÷i° * )
	`mÆloc
((list));

81 
l°
->
hódî
=
NULL
;

82 
l°
->
èû
=
NULL
;

84 
sigema
=0.00;

85 
i
=
©∫
-2;i>=0;i--)

87 if(!(
	`EXACT
(
MICS
[
i
].
vÆ
)<EXACT(
sigema
)))

89 
	`ö_mic
(
l°
,
MICS
[
i
]);

97 
	`‰ì
(
MICS
);

100 
	`puts
("Begin selection.Running...");

101 
li°_node
 *
ç
=
l°
->
hódî
;

102 
ç
)

104 
li°_node
 *
tq
=
ç
->
¬
;

105 
tq
)

108 
Ωq
=
	`ˇl_mic_öãr
(
fûíame
,
D
,
ç
->
idx
,
tq
->idx,
Æpha
,
f
);

113 if(!(
	`EXACT
(
Ωq
)<EXACT(
tq
->
mic
)))

116 
	`dñ_l_±r
(
l°
,
tq
);

117 
tq
=
ç
->
¬
;

121 
tq
Òq->
¬
;

124 
ç
Òp->
¬
;

127 
	`‰ì
(
D
->
x
);

128 
	`‰ì
(
D
->
y
);

129 
	`‰ì
(
D
);

131  
l°
;

132 
	}
}

135 
	$ö_mic
(
li°
 *
l°
,
d©a_ty≥
 
m
)

137 
	`add_l
(
l°
);

138 
l°
->
èû
->
mic
=
m
.
vÆ
;

139 
l°
->
èû
->
idx
=
m
.
pos
;

140 
	}
}

143 
	$add_l
(
li°
 * 
l°
)

145 
li°_node
 *
ç
=÷i°_nodê*)
	`mÆloc
((list_node));

146 if(
l°
->
hódî
==
NULL
)

148 
ç
->
≤
=
NULL
;

149 
ç
->
¬
=
NULL
;

150 
l°
->
hódî
=
ç
;

151 
l°
->
èû
=
ç
;

155 
ç
->
≤
=
l°
->
èû
;

156 
ç
->
¬
=
NULL
;

157 
l°
->
èû
->
¬
=
ç
;

158 
l°
->
èû
=
ç
;

161 
	}
}

164 
	$dñ_l_±r
(
li°
 *
l°
,
li°_node
 *
ç
)

166 if(
ç
->
≤
==
NULL
)

168 if(
ç
->
¬
==
NULL
)

170 
l°
->
hódî
=
NULL
;

171 
l°
->
èû
=
NULL
;

172 
	`‰ì
(
ç
);

177 
l°
->
hódî
=
ç
->
¬
;

178 
ç
->
¬
->
≤
=
NULL
;

179 
	`‰ì
(
ç
);

183 if(
ç
->
¬
==
NULL
)

185 
l°
->
èû
=
ç
->
≤
;

186 
l°
->
èû
->
¬
=
NULL
;

187 
	`‰ì
(
ç
);

192 
ç
->
≤
->
¬
=tp->nn;

193 
ç
->
¬
->
≤
=tp->pn;

194 
	`‰ì
(
ç
);

197 
	`¥ötf
("NodeÑemoveÉrror !\n");

198 
	}
}

199 
	$dñ_l_idx
(
li°
 *
l°
,
idx
)

201 if(
l°
->
hódî
==
NULL
)

203 
	`puts
("NoÜist orÜistÉmpty!");

206 
li°_node
 *
ç
=
l°
->
hódî
;

207 
ç
)

209 if(
ç
->
idx
==idx)

211 if(
ç
->
≤
==
NULL
)

213 if(
ç
->
¬
==
NULL
)

215 
l°
->
hódî
=
NULL
;

216 
l°
->
èû
=
NULL
;

217 
	`‰ì
(
ç
);

222 
l°
->
hódî
=
ç
->
¬
;

223 
ç
->
¬
->
≤
=
NULL
;

224 
	`‰ì
(
ç
);

228 if(
ç
->
¬
==
NULL
)

230 
l°
->
èû
=
ç
->
≤
;

231 
l°
->
èû
->
¬
=
NULL
;

232 
	`‰ì
(
ç
);

237 
ç
->
≤
->
¬
=tp->nn;

238 
ç
->
¬
->
≤
=tp->pn;

239 
	`‰ì
(
ç
);

244 
ç
Òp->
¬
;

246 
	`¥ötf
("Index %dÇŸ found !\n",
idx
);

247 
	}
}

250 
	$brk_l
(
li°
 *
l°
)

252 if(
l°
==
NULL
)

256 
li°_node
 * 
cur
=
l°
->
hódî
;

257 
li°_node
 * 
ç
=
cur
;

258 
cur
)

260 
ç
=
cur
;

261 
cur
=cur->
¬
;

262 
	`‰ì
(
ç
);

264 
l°
->
hódî
=
NULL
;

265 
	}
}

	@micfs.h

1 #i‚de‡
MICFS_HEADER


2 
	#MICFS_HEADER


	)

4 
	~"mic.h
"

5 
	sLi°Node


7 
	mmic
;

8 
	midx
;

9 
Li°Node
 *
	m¬
;

10 
Li°Node
 *
	m≤
;

11 }
	tli°_node
;

13 
	sLi°


15 
li°_node
 * 
	mhódî
;

16 
li°_node
 * 
	mèû
;

17 
	mÀn
;

18 }
	tli°
;

20 
add_l
(
li°
 * 
l°
);

21 
dñ_l_idx
(
li°
 *
l°
,
idx
);

22 
dñ_l_±r
(
li°
 *
l°
,
li°_node
 *
ç
);

23 
brk_l
(
li°
 *
l°
);

24 
ö_mic
(
li°
 *
l°
,
d©a_ty≥
 
m
);

26 
li°
 * 
micfs
(*
fûíame
,
Poöts
 * 
D
,
Æpha
,
f
);

	@para_chk.c

1 
	~"∑ø_chk.h
"

15 
	$∑ø_chk
(
¨gc
,*
¨gv
[],
©∫
)

17 if(
¨gc
<5||argc>7)

19 
	`¥ötf
("ParameterÉrror!\n");

20 
	`ußge
();

23 if(
	`ck_m
(
¨gv
[1])==0)

25 if(
	`ck_mic
(
¨gc
,
¨gv
,
©∫
))

31 if(
	`ck_m
(
¨gv
[1])==1)

34 if(
	`ck_micfs
(
¨gc
,
¨gv
))

39 if(
	`ck_m
(
¨gv
[1])==2)

41 
	`ußge
();

45 
	}
}

48 
	$ck_m
(*
mode
)

50 if(
	`°rcmp
(
mode
,"-MIC")==0)

54 if(
	`°rcmp
(
mode
,"-MICFS")==0)

60 
	`puts
("Program Mode Error !");

63 
	}
}

64 
	$ck_mic
(
¨gc
,*
¨gv
[], 
©∫
)

66 if(
	`ck_n
(
¨gc
,7)&&
	`ck_f
(
¨gv
[2])&&
	`ck_i
(
	`©oi
◊rgv[3]),©oi◊rgv[4]),
©∫
)&&
	`ck_e
(
	`©of
(argv[5])) )

74 
	}
}

75 
	$ck_micfs
(
¨gc
,*
¨gv
[])

77 if(
	`ck_n
(
¨gc
,5)&&
	`ck_f
(
¨gv
[2])&&
	`ck_e
(
	`©of
(argv[3])) )

85 
	}
}

88 
	$ck_n
(
¨gc
,
dî
)

90 if(
¨gc
!=
dî
)

92 
	`¥ötf
("Numbî o‡∑ømëî†îr‹! Ex≥˘ed %d !",
dî
);

99 
	}
}

102 
	$ck_f
(*
fûíame
)

104 
FILE
 *
ç
=
	`f›í
(
fûíame
,"r");

105 if(!
ç
)

107 
	`¥ötf
("Fûê%†›íÉº‹!\n",
fûíame
);

108 
	`f˛o£
(
ç
);

109 
ç
=
NULL
;

116 
	}
}

119 
	$ck_i
(
xa
,
yb
,
©∫
)

121 if––(
xa
 > 
©∫
Ë|| (
yb
 >átrn) )

122 || ( 
xa
 < 0Ë|| (
yb
 < 0) )

124 
	`¥ötf
("I≈uà©åibuã†ödexe†%d %dÇŸ bëwì¿[0,%d].\n",
xa
,
yb
,
©∫
);

131 
	}
}

134 
	$ck_e
(
e
)

136 if–(
e
 >1) || (e < 0) )

138 
	`¥ötf
("exp⁄ítü»ödex %‡nŸ bëwì¿[0,1]\n",
e
);

145 
	}
}

148 
	$ußge
()

150 
	`puts
("Usage: ./micfs mode file_name mode_specified_parameters");

151 
	`puts
("Example 1: ./micsf -MICÖath/to/file 2 3 0.6 15");

152 
	`puts
("\t-MIC meansÅheÖrogram will inÅhe mic only mode");

153 
	`puts
("\t2ánd 3áreÅhe indexes ofáttributesÅo beánalyzed.");

154 
	`puts
("\t0.6 isÅheÉxpotional index of B.");

155 
	`puts
("\t15 isÅhe clumps factor.");

156 
	`puts
("Example 2: ./micsf -MICFSÖath/to/file 0.6 15");

157 
	`puts
("\t-MICFS meansÅheÖrogram will inÅhe subset features selection mode");

158 
	`puts
("\t0.6 isÅheÉxpotional index of B.");

159 
	`puts
("\t15 isÅhe clumps factor.");

160 
	`puts
("\tBeforeÑunÅheÖrogram,allÅheÖarameters must be specifiedÑightánd clearlyáccordingÅo your own situation.");

161 
	}
}

	@para_chk.h

2 #i‚de‡
PARA_H


3 
	#PATA_H


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

11 
∑ø_chk
(
¨gc
,*
¨gv
[],
©∫
);

12 
ck_m
(*
mode
);

13 
ck_mic
(
¨gc
,*
¨gv
[], 
©∫
);

14 
ck_micfs
(
¨gc
,*
¨gv
[]);

15 
ck_n
(
¨gc
,
dî
);

16 
ck_f
(*
fûíame
);

17 
ck_i
(
xa
,
yb
,
©∫
);

18 
ck_e
(
e
);

19 
ußge
();

	@read_content.c

1 
	~"ªad_c⁄ã¡.h
"

3 ** 
	$ªad_c⁄ã¡
(
f˘
 *
fûe
)

5 
FILE
 * 
§c
 =
	`f›í
(
fûe
->
‚
,"r");

6 *
l
=(*)
	`mÆloc
(()*
bufsize
);

9 
löe_numb
=0;

10 
	`fgës
(
l
,
bufsize
,
§c
))

12 
löe_numb
++;

14 
fûe
->
ö°
=
löe_numb
;

18 
©∫
;

19 
	`f£ek
(
§c
,0,
SEEK_SET
);

20 
	`fgës
(
l
,
bufsize
,
§c
);

21 if(
	`fgës
(
l
,
bufsize
,
§c
))

23 *
ç
=
l
;

24 
©∫
=0;

25 !(*
ç
=='\0'||*tp=='\n'))

27 !
	`isdigô
(*
ç
)&&!(*tp=='\0'||*tp=='\n'))

29 
ç
++;

31 
©∫
++;

32 
	`°πod
(
ç
,&tp);

33 
ç
++;

36 
fûe
->
©∫
=atrn;

41 **
c⁄ã¡
=(**)
	`mÆloc
((*)*
©∫
);

42 
i
=0;

43 
i
=0;i<
©∫
;i++)

45 
c⁄ã¡
[
i
]=(*)
	`mÆloc
(()*(
löe_numb
-1));

47 
	`f£ek
(
§c
,0,
SEEK_SET
);

48 
	`fgës
(
l
,
bufsize
,
§c
);

49 *
ç
=
NULL
;

50 
i
=0;

51 
	`fgës
(
l
,
bufsize
,
§c
))

53 
j
=0;

54 
ç
=
l
;

55 *
ç
!='\0'&&*tp!='\n')

57 
c⁄ã¡
[
j
][
i
]=
	`°πod
(
ç
,&tp);

59 
ç
++;

60 
j
++;

63 
i
++;

65 
	`‰ì
(
l
);

66 
l
=
NULL
;

67 
	`f˛o£
(
§c
);

68 
fûe
->
˘
=
c⁄ã¡
;

69  
c⁄ã¡
;

70 
	}
}

72 
	$mic_˘_mem
(
f˘
 
fûe_c⁄ã¡
,
Poöts
 *
D
,
a
 ,
b
,
Æpha
,
f
)

74 
i
=0;

75 
i
=0;i<
fûe_c⁄ã¡
.
ö°
-1;i++)

77 
D
->
x
[
i
].
vÆ
=
fûe_c⁄ã¡
.
˘
[
a
][i];

78 
D
->
y
[
i
].
vÆ
=
fûe_c⁄ã¡
.
˘
[
b
][i];

79 
D
->
x
[
i
].
pos
=i;

80 
D
->
y
[
i
].
pos
=i;

82 
ªsu…
=
	`ˇl_mic
(
D
,
Æpha
,
f
);

83 if(
	`EXACT
(
ªsu…
)>EXACT(1.0000))

85 
ªsu…
=0.00;

87  
ªsu…
;

88 
	}
}

90 
	$ˇl_mic_˘mem
(
¨gc
,*
¨gv
[])

92 
f˘
 
fûe_c⁄ã¡
;

93 
fûe_c⁄ã¡
.
‚
=
¨gv
[1];

94 
	`ªad_c⁄ã¡
(&
fûe_c⁄ã¡
);

95 
Poöts
 * 
D
=(Poöt†*)
	`mÆloc
((Points));

96 
D
->
Àn
=
	`cou¡_ö°
(
¨gv
[1]);

98 
D
->
x
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

99 
D
->
y
=(
d©a_ty≥
 *)
	`mÆloc
((d©a_ty≥)*D->
Àn
);

100 
D
->
grid
=(
œbñ_ty≥
 *)
	`mÆloc
(÷abñ_ty≥)*D->
Àn
);

101 
ªsu…
=
	`mic_˘_mem
(
fûe_c⁄ã¡
,
D
,
	`©oi
(
¨gv
[2]),©oi◊rgv[3]),
	`©of
(argv[4]),atof(argv[5]));

102 
	`¥ötf
("ªsu…:%f\n",
ªsu…
);

103 
i
=0;

104 
i
=0;i<
fûe_c⁄ã¡
.
©∫
;i++)

106 
	`‰ì
(
fûe_c⁄ã¡
.
˘
[
i
]);

108 
	`‰ì
(
fûe_c⁄ã¡
.
˘
);

109 
	`‰ì
(
D
->
x
);

110 
D
->
x
=
NULL
;

111 
	`‰ì
(
D
->
y
);

112 
D
->
y
=
NULL
;

113 
	`‰ì
(
D
->
grid
);

114 
D
->
grid
=
NULL
;

115 
	`‰ì
(
D
);

116 
D
=
NULL
;

117 
	}
}

	@read_content.h

1 #i‚de‡
READ_ALL_CONTENT


2 
	#READ_ALL_CONTENT


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<˘y≥.h
>

7 
	~"mic.h
"

8 
	sFûeC⁄ã¡


10 *
	m‚
;

11 
	mö°
;

12 
	m©∫
;

13 **
	m˘
;

14 }
	tf˘
;

15 ** 
ªad_c⁄ã¡
(
f˘
 *
fûe
);

16 
mic_˘_mem
(
f˘
 
fûe_c⁄ã¡
,
Poöts
 *
D
,
a
 ,
b
,
Æpha
,
f
);

17 
ˇl_mic_˘mem
(
¨gc
,*
¨gv
[]);

	@sffs.c

1 
	~"sffs.h
"

41 
Ê_ç
 
	$öi_Xk
()

43 
Ê_ç
 
Xk
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

44 
Xk
->
k
=0;

45 
Xk
->
sig
=0;

46 
Xk
->
membs
=(*)
	`mÆloc
(()*Xk->
k
);

47 
Xk
->
hódî
=Xk->
èû
=
NULL
;

48  
Xk
;

49 
	}
}

50 
Ê_ç
 
	$öi_Ym
(
mic_m©rix
 
M
)

53 
Ê_ç
 
Ym
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

54 
Ym
->
k
=
M
.
©∫
-1;

55 
Ym
->
membs
=(*)
	`mÆloc
(()*(Ym->
k
));

56 
Ym
->
hódî
=Ym->
èû
=
NULL
;

57 
i
=0;

58 
i
=0;i<
Ym
->
k
;i++)

60 
Ym
->
membs
[
i
]=i;

61 
„t_ç
 
cur
=(„t_ç)
	`mÆloc
((
„©uª_li°
));

62 
cur
->
©r
=
i
;

63 
cur
->
sig
=0.00;

64 
cur
->
¬
=
NULL
;

65 
cur
->
≤
=
NULL
;

66 if(
Ym
->
hódî
==
NULL
)

68 
Ym
->
hódî
=
cur
;

69 
Ym
->
èû
=
cur
;

70 
cur
->
≤
=cur->
¬
=
NULL
;

74 
Ym
->
èû
->
¬
=
cur
;

75 
cur
->
≤
=
Ym
->
èû
;

76 
Ym
->
èû
=
cur
;

79  
Ym
;

80 
	}
}

81 
Ê_ç
 
	$sffs
(
mic_m©rix
 
M
,
n
)

85 
Ê_ç
 
Xk
=
	`öi_Xk
();

86 
Ê_ç
 
Ym
=
	`öi_Ym
(
M
);

88 
Xk
->
k
 < 2)

90 
msw
=
	`gmsw
(
Xk
,
Ym
,
M
);

91 
	`add_node
(
msw
,
Xk
,
M
);

92 
	`dñ_node
(
msw
,
Ym
,
M
);

94 #ifde‡
debug_tŸÆ


95 
	`¥ötf
("Nowádd msw %dÅÿXk which ha†%d membîs.\n",
msw
,
Xk
->
k
);

98 #ifde‡
debug_tŸÆ


99 
	`¥ötf
("Xk members :");

100 
	`check_„©uª_li°
(
Xk
);

103 
d
=
n
;

104 
Xk
->
k
 < 
d
 && 
Ym
->k>0)

106 
msw
=
	`gmsw
(
Xk
,
Ym
,
M
);

107 
Ê_ç
 
Xk_∂us
=
	`∂us_msw
(
Xk
,
msw
);

108 
lsi
=
	`glsi
(
Xk_∂us
,
M
);

109 #ifde‡
debug_tŸÆ


110 
	`¥ötf
("*****NewÜo›,Xk ha†%d membî†d :%d,msw:%d.******\¿Xk_∂u†lsòi†%d whûêthêXk->œ° i†%d.\n",
Xk
->
k
,
d
,
msw
,
lsi
,Xk->
èû
->
©r
);

112 if(
lsi
 !
Xk_∂us
->
membs
[Xk_∂us->
k
-1])

114 if(
Xk_∂us
->
k
-1==2)

116 
	`add_node
(
msw
,
Xk
,
M
);

117 
	`dñ_node
(
msw
,
Ym
,
M
);

118 
	`add_node
(
lsi
,
Ym
,
M
);

119 
	`dñ_node
(
lsi
,
Xk
,
M
);

120 
	`upd©e_Xk_mîô
(
Xk
,
M
);

121 
	`‰ì
(
Xk_∂us
->
membs
);

122 
	`‰ì
(
Xk_∂us
);

123 #ifde‡
debug_tŸÆ


124 
	`¥ötf
("Xk'->k=2,Çow Xk:");

125 
	`check_„©uª_li°
(
Xk
);

130 
Ê_ç
 
Xk_chg
=
	`dñ_lsi
(
lsi
,
Xk_∂us
,
M
);

131 #ifde‡
debug_tŸÆ


132 
	`¥ötf
("BeginÅo conditionÉxclusion,Xk' withoutÜsi\t");

133 
	`check_„©uª_li°
(
Xk_chg
);

135 
lsi_chg
=
	`glsi
(
Xk_chg
,
M
);

137 
Ê_ç
 
Xk_miu_chg
=
	`dñ_lsi
(
lsi_chg
,
Xk_chg
,
M
);

138 #ifde‡
debug_tŸÆ


139 
	`¥ötf
("Xk'†lsò:%d,Xk'-1 i†",
lsi_chg
);

140 
	`check_„©uª_li°
(
Xk_miu_chg
);

141 
	`¥ötf
("Sig(Xk'-1Ë%‡™d Sig(Xk-1Ë%f.so..\n",
	`EXACT
–
Xk_miu_chg
->
sig
), EXACT(
Xk
->
èû
->
≤
->sig));

143 if(
	`EXACT
–
Xk_miu_chg
->
sig
Ë> EXACT(
Xk
->
èû
->
≤
->sig) )

145 
	`EXACT
(
Xk_miu_chg
->
sig
Ë> EXACT(
Xk
->
èû
->
≤
->sigË&& Xk_miu_chg->
k
 >2 )

147 
	`l°_Ωlc
(&
Xk_chg
,&
Xk_miu_chg
);

148 
	`‰ì
(
Xk_miu_chg
->
membs
);

149 
	`‰ì
(
Xk_miu_chg
);

150 
	`dñ_node
(
Xk
->
èû
->
©r
,Xk,
M
);

151 
	`add_node
(
Xk
->
èû
->
©r
,
Ym
,
M
);

152 
lsi_chg
=
	`glsi
(
Xk_chg
,
M
);

153 
Ê_ç
 
Xk_miu_chg
=
	`dñ_lsi
(
lsi_chg
,
Xk_chg
,
M
);

154 #ifde‡
debug_tŸÆ


155 
	`¥ötf
("Cause Xk'-1 > Xk-1,soÇow Xk");

156 
	`check_„©uª_li°
(
Xk
);

162 #ifde‡
debug_tŸÆ


163 
	`¥ötf
("Cause Xk'-1 < Xk-1,SoÇow Xk");

164 
	`check_„©uª_li°
(
Xk
);

166 
	`‰ì
(
Xk_miu_chg
->
membs
);

167 
	`‰ì
(
Xk_miu_chg
);

169 
	`brk_Êç
(
Xk
);

170 
	`‰ì
(
Xk
->
membs
);

171 
	`brk_Êç
(
Ym
);

172 
	`‰ì
(
Ym
->
membs
);

173 
Xk
=
	`öi_Xk
();

174 
Ym
=
	`öi_Ym
(
M
);

175 
i
=0;

176 
i
=0;i<
Xk_chg
->
k
;i++)

178 
	`add_node
(
Xk_chg
->
membs
[
i
],
Xk
,
M
);

179 
	`dñ_node
(
Xk_chg
->
membs
[
i
],
Ym
,
M
);

181 
	`‰ì
(
Xk_chg
->
membs
);

182 
	`‰ì
(
Xk_chg
);

189 
	`add_node
(
msw
,
Xk
,
M
);

190 
	`dñ_node
(
msw
,
Ym
,
M
);

191 #ifde‡
debug_tŸÆ


192 
	`¥ötf
("LsiÉqualsÅheÜast one,andÇow Xk ");

193 
	`check_„©uª_li°
(
Xk
);

196 
	`‰ì
(
Xk_∂us
->
membs
);

197 
	`‰ì
(
Xk_∂us
);

201  
Xk
;

202 
	}
}

204 
	$gmsw
(
Ê_ç
 
Xk
,Ê_ç 
Ym
,
mic_m©rix
 
M
)

206 *
l°_Xk
=(*)
	`mÆloc
((
Xk
->
k
+1)*());

207 
i
=0;

208 if(
Xk
->
k
==0)

210 
Xk
->
membs
[0]=0;

212 
i
=0;i<
Xk
->
k
;i++)

215 
l°_Xk
[
i
]=
Xk
->
membs
[i];

218 
Xk_Àn
=
Xk
->
k
+1;

219 
max
=-
FLT_MAX
;

220 
©r
=-1;

221 
„t_ç
 
cur
=
Ym
->
hódî
;

222 
i
=0;i<
Ym
->
k
;i++)

225 
l°_Xk
[
Xk_Àn
-1]=
cur
->
©r
;

226 #ifde‡
debug_gmsw


227 
	`¥ötf
("cur->©r:%d\nCheck Xk_:",
cur
->
©r
);

228 
	`check_¨ry
(
l°_Xk
,
Xk
->
k
+1);

230 
mîô
=
	`ˇl_mîô
(
l°_Xk
,
Xk_Àn
,
M
);

231 #ifde‡
debug_gmsw


232 
	`¥ötf
("Debuggög gmswándÇow mîô %‡wôháå %d.\n",
mîô
,
cur
->
©r
);

234 if(
	`EXACT
(
mîô
)>EXACT(
max
))

236 
max
=
mîô
;

237 
©r
=
cur
->atr;

239 
cur
=cur->
¬
;

241 
	`‰ì
(
l°_Xk
);

242 #ifde‡
debug_gmsw


243 
	`¥ötf
("nowáå:%d\n",
©r
);

245  
©r
;

246 
	}
}

249 
Ê_ç
 
	$add_node
(
©r
,
Ê_ç
 
Xk
,
mic_m©rix
 
M
)

251 *
Xk_membs
=(*)
	`mÆloc
(()*(
Xk
->
k
+1));

252 
i
=0;

253 
i
=0;i<
Xk
->
k
;i++)

255 
Xk_membs
[
i
]=
Xk
->
membs
[i];

257 
Xk_membs
[
Xk
->
k
]=
©r
;

258 * 
ç
=
Xk
->
membs
;

259 
Xk
->
membs
=
Xk_membs
;

260 
	`‰ì
(
ç
);

261 
ç
=
NULL
;

262 
Xk
->
k
+=1;

263 
„t_ç
 
msw
=(„t_ç)
	`mÆloc
((
„©uª_node
));

264 
msw
->
≤
=
NULL
;

265 
msw
->
¬
=
NULL
;

266 
msw
->
©r
=atr;

267 
msw
->
sig
=
	`ˇl_mîô
(
Xk
->
membs
,Xk->
k
,
M
);

268 
Xk
->
sig
=
msw
->sig;

269 if(
Xk
->
hódî
==
NULL
)

271 
Xk
->
hódî
=
msw
;

272 
Xk
->
èû
=
msw
;

276 
Xk
->
èû
->
¬
=
msw
;

277 
msw
->
≤
=
Xk
->
èû
;

278 
Xk
->
èû
=
msw
;

281 #ifde‡
debug_addnode


282 
	`check_„©uª_li°
(
Xk
);

284  
Xk
;

285 
	}
}

286 
Ê_ç
 
	$dñ_node
(
©r
,
Ê_ç
 
Ym
,
mic_m©rix
 
M
)

288 *
Ym_membs
=(*)
	`mÆloc
(()*(
Ym
->
k
-1));

289 
p
=0;

290 
„t_ç
 
cur
=
Ym
->
hódî
;

291 
„t_ç
 
msw
=
NULL
;

292 
cur
)

294 if(
cur
->
©r
==atr)

296 
msw
=
cur
;

300 
Ym_membs
[
p
++]=
cur
->
©r
;

302 
cur
=cur->
¬
;

304 *
çm
=
Ym
->
membs
;

305 
Ym
->
membs
=
Ym_membs
;

306 
	`‰ì
(
çm
);

307 
çm
=
NULL
;

308 
Ym
->
k
-=1;

309 
Ym
->
sig
=
	`ˇl_mîô
(Ym->
membs
,Ym->
k
,
M
);

310 if(
msw
==
NULL
)

312 
	`puts
("Not foundÅhe msw .ThisÉrror is inádd_node ");

314 if(
msw
==
Ym
->
hódî
&&msw==Ym->
èû
)

316 
Ym
->
hódî
=
NULL
;

317 
Ym
->
èû
=
NULL
;

319 if(
msw
==
Ym
->
hódî
&&msw!=Ym->
èû
)

321 
Ym
->
hódî
=
msw
->
¬
;

322 
msw
->
¬
->
≤
=
NULL
;

324 if(
msw
==
Ym
->
èû
&&msw!=Ym->
hódî
)

326 
Ym
->
èû
=
msw
->
≤
;

327 
msw
->
≤
->
¬
=
NULL
;

331 
msw
->
≤
->
¬
=msw->nn;

332 
msw
->
¬
->
≤
=msw->pn;

334 
msw
->
≤
=
NULL
;

335 
msw
->
¬
=
NULL
;

336 
	`‰ì
(
msw
);

337 
msw
=
NULL
;

338  
Ym
;

339 
	}
}

341 
Ê_ç
 
	$∂us_msw
(
Ê_ç
 
Xk
,
msw
)

343 
Ê_ç
 
Xk_∂us
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

344 
Xk_∂us
->
k
=
Xk
->k+1;

345 
Xk_∂us
->
membs
=(*)
	`mÆloc
(()*(Xk_∂us->
k
));

346 
i
=0;

347 
i
=0;i<
Xk_∂us
->
k
-1;i++)

349 
Xk_∂us
->
membs
[
i
]=
Xk
->membs[i];

351 
Xk_∂us
->
membs
[
i
]=
msw
;

352 #ifde‡
debug_∂us_msw


353 
	`¥ötf
("Xk->œ°:%d\ti:%d\tmsw:%d\n",
Xk_∂us
->
membs
[Xk_∂us->
k
-1],
i
,Xk_plus->membs[i]);

355 
Xk_∂us
->
hódî
=Xk_∂us->
èû
=
NULL
;

356  
Xk_∂us
;

357 
	}
}

360 
	$glsi
(
Ê_ç
 
Xk_∂us
,
mic_m©rix
 
M
)

362 
l
=
Xk_∂us
->
k
;

363 
i
=0;

365 *
£t
=(*)
	`mÆloc
(()*(
l
-1));

366 
©r
=-1;

367 
max
=-1;

368 
i
=0;i<
l
;i++)

370 
j
=0;

371 
k
=0;

372 
j
=0;j<
l
;j++)

374 if(
j
!=
i
)

376 
£t
[
k
++]=
Xk_∂us
->
membs
[
j
];

379 
mîô
=
	`ˇl_mîô
(
£t
,
l
-1,
M
);

380 #ifde‡
debug_glsi


381 
	`¥ötf
("li° wôhout:%d\tmîô i†%f\n",
Xk_∂us
->
membs
[
i
],
mîô
);

383 if(
	`EXACT
(
mîô
)>=EXACT(
max
))

385 
max
=
mîô
;

386 
©r
=
Xk_∂us
->
membs
[
i
];

389 
	`‰ì
(
£t
);

390  
©r
;

391 
	}
}

394 
Ê_ç
 
	$dñ_lsi
(
lsi
,
Ê_ç
 
Xk_∂us
,
mic_m©rix
 
M
)

396 
Ê_ç
 
chg
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

397 
chg
->
membs
=(*)
	`mÆloc
(()*(
Xk_∂us
->
k
-1));

398 
chg
->
k
=
Xk_∂us
->k-1;

399 
i
=0;

400 
k
=0;

401 
i
=0;i<
Xk_∂us
->
k
;i++)

403 if((
Xk_∂us
->
membs
[
i
])!=
lsi
)

405 
chg
->
membs
[
k
++]=
Xk_∂us
->membs[
i
];

408 #ifde‡
debug_dñ_lsi


409 
	`puts
("Here InÅhe del_lsi.");

410 
	`check_„©uª_li°
(
chg
);

412 
chg
->
sig
=
	`ˇl_mîô
(chg->
membs
,chg->
k
,
M
);

413 
chg
->
hódî
=
Xk_∂us
->header;

414 
chg
->
èû
=
Xk_∂us
->tail;

415  
chg
;

416 
	}
}

419 
Ê_ç
 
	$l°_Ωlc
(
Ê_ç
 *
‹igöÆ
,Ê_ç *
èrgë
)

421 
Ê_ç
 
çn
=
NULL
;

423 
çn
=*
èrgë
;

424 *
èrgë
=*
‹igöÆ
;

425 *
‹igöÆ
=
çn
;

427  *
‹igöÆ
;

428 
	}
}

430 
	$brk_Êç
(
Ê_ç
 
Xk
)

432 
„t_ç
 
cur
=
Xk
->
hódî
;

433 
„t_ç
 
ç
;

434 
cur
)

436 
ç
=
cur
;

437 
cur
=cur->
¬
;

438 
	`‰ì
(
ç
);

440 
	}
}

441 
	$check_„©uª_li°
(
Ê_ç
 
li°
)

443 
i
=0;

444 
RED_1
;

446 
RED_0
;

448 
i
=0;i<
li°
->
k
;i++)

450 
	`¥ötf
("%d\t",
li°
->
membs
[
i
]);

452 if(
li°
->
hódî
)

454 
	`puts
("Real One.\nCheckÇodes: ");

455 
„t_ç
 
cur
=
li°
->
hódî
;

456 
cur
)

458 
	`¥ötf
("©r:%d\tsig:%f\n",
cur
->
©r
,cur->
sig
);

459 
cur
=cur->
¬
;

465 
	`¥ötf
("Virtual one.\n");

469 
	}
}

470 
	$upd©e_Xk_mîô
(
Ê_ç
 
Xk
,
mic_m©rix
 
M
)

472 
i
=0;

473 
„t_ç
 
cur
=
Xk
->
hódî
;

474 
i
=0;i<
Xk
->
k
;i++)

476 
cur
->
sig
=
	`ˇl_mîô
(
Xk
->
membs
,
i
,
M
);

477 
cur
=cur->
¬
;

479 
	}
}

	@sffs.h

1 #i‚de‡
SFFS_H


2 
	#SFFS_H


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<m©h.h
>

7 
	~"mic.h
"

8 
	~"mic_m©rix.h
"

11 
	#RED_1
 
	`¥ötf
("\033[31m")

	)

12 
	#RED_0
 
	`¥ötf
("\033[0m")

	)

21 
	sFótuªNode


23 
	m©r
;

24 
	msig
;

25 
FótuªNode
 *
	m≤
;

26 
FótuªNode
 *
	m¬
;

27 }
	t„©uª_node
,*
	t„t_ç
;

29 
	sFótuªLi°


31 * 
	mmembs
;

32 
	mk
;

33 
	msig
;

34 
„t_ç
 
	mhódî
;

35 
„t_ç
 
	mèû
;

36 }
	t„©uª_li°
,*
	tÊ_ç
;

39 
Ê_ç
 
öi_Xk
();

40 
Ê_ç
 
öi_Ym
(
mic_m©rix
 
M
);

41 
upd©e_Xk_mîô
(
Ê_ç
 
Xk
,
mic_m©rix
 
M
);

42 
gmsw
(
Ê_ç
 
Xk
,Ê_ç 
Ym
,
mic_m©rix
 
M
);

43 
Ê_ç
 
add_node
(
©r
,Ê_ç 
Xk
,
mic_m©rix
 
M
);

44 
Ê_ç
 
dñ_node
(
©r
,Ê_ç 
Ym
,
mic_m©rix
 
M
);

45 
Ê_ç
 
∂us_msw
(Ê_ç 
Xk
,
msw
);

46 
glsi
(
Ê_ç
 
Xk_∂us
,
mic_m©rix
 
M
);

47 
Ê_ç
 
dñ_lsi
(
lsi
,Ê_ç 
Xk_∂us
,
mic_m©rix
 
M
);

48 
Ê_ç
 
l°_Ωlc
(Ê_ç *
‹igöÆ
,Ê_ç *
èrgë
);

49 
Ê_ç
 
sffs
(
mic_m©rix
 
M
,
n
);

50 
check_„©uª_li°
(
Ê_ç
 
li°
);

51 
brk_Êç
(
Ê_ç
 
Xk
);

	@sffs_older.c

1 
	~"sffs.h
"

37 
Ê_ç
 
	$sffs
(
mic_m©rix
 
M
,
n
)

39 
	#debug_tŸÆ


	)

42 
Ê_ç
 
Xk
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

43 if(
Xk
==
NULL
)

45 
	`¥ötf
("SFFS Xk initial memoryÉrror!\n");

46 
	`exô
(1);

48 
Xk
->
k
=0;

49 
Xk
->
sig
=0;

50 
Xk
->
membs
=
NULL
;

51 
Xk
->
hódî
=Xk->
èû
=
NULL
;

53 
Ê_ç
 
Ym
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

54 
Ym
->
k
=
M
.
©∫
-1;

55 
Ym
->
membs
=(*)
	`mÆloc
(()*(Ym->
k
));

56 
Ym
->
hódî
=Ym->
èû
=
NULL
;

58 
i
=0;

59 
i
=0;i<
Ym
->
k
;i++)

61 
Ym
->
membs
[
i
]=i;

62 
„t_ç
 
cur
=(„t_ç)
	`mÆloc
((
„©uª_li°
));

63 
cur
->
©r
=
i
;

64 
cur
->
pos
=
i
;

65 
cur
->
mic
=
M
.mic[M.
˛ass_idx
][
i
];

66 
cur
->
sig
=0.00;

67 
cur
->
¬
=
NULL
;

68 
cur
->
≤
=
NULL
;

69 if(
Ym
->
hódî
==
NULL
&&Ym->
èû
==NULL)

71 
Ym
->
hódî
=
cur
;

72 
Ym
->
èû
=
cur
;

73 
cur
->
≤
=cur->
¬
=
NULL
;

77 
Ym
->
èû
->
¬
=
cur
;

78 
cur
->
≤
=
Ym
->
èû
;

79 
Ym
->
èû
=
cur
;

83 
Xk
->
k
 < 2)

85 
msw
=
	`gmsw
(
Xk
,
Ym
,
M
);

86 
	`add_node
(
msw
,
Xk
,
Ym
,
M
);

87 #ifde‡
debug_tŸÆ


88 
	`¥ötf
("Nowádd msw %dÅÿXk which ha†%d membîs.\n",
msw
,
Xk
->
k
);

91 #ifde‡
debug_tŸÆ


92 
	`¥ötf
("Xk members :");

93 
	`check_„©uª_li°
(
Xk
);

96 
d
=
n
;

97 if(
d
>=
M
.
©∫
)

100 
d
=
	`∫d
(
M
.
©∫
/3.00);

102 #ifde‡
debug_tŸÆ


103 
	`¥ötf
("sf‡d :%d,M.©∫:%d\n",
d
,
M
.
©∫
);

105 
Xk
->
k
 <
d
 && 
Ym
->k>0)

107 
msw
=
	`gmsw
(
Xk
,
Ym
,
M
);

108 
Ê_ç
 
Xk_∂us
=
	`∂us_msw
(
Xk
,
msw
);

109 
lsi
=
	`glsi
(
Xk_∂us
,
M
);

110 #ifde‡
debug_tŸÆ


111 
	`¥ötf
("*****NewÜo›,Xk ha†%d membîs.******\¿Thêlsòi†%d whûêthêœ° i†%d.\n",
Xk
->
k
,
lsi
,
msw
);

113 if(
lsi
 !
Xk_∂us
->
membs
[Xk_∂us->
k
-1])

115 if(
Xk_∂us
->
k
-1==2)

117 
Xk
=
	`add_node
(
msw
,Xk,
Ym
,
M
);

118 
	`add_node
(
lsi
,
Ym
,
Xk
,
M
);

119 #ifde‡
debug_tŸÆ


120 
	`¥ötf
("Xk'->k=2,Çow Xk:");

121 
	`check_„©uª_li°
(
Xk
);

123 
	`‰ì
(
Xk_∂us
->
membs
);

124 
	`‰ì
(
Xk_∂us
);

128 
Ê_ç
 
Xk_chg
=
	`dñ_lsi
(
lsi
,
Xk_∂us
,
M
);

129 #ifde‡
debug_tŸÆ


130 
	`¥ötf
("BegöÅÿc⁄dôi⁄Éx˛usi⁄,Xk->èû:%d,Xk' wôhouàlsi\t",
Xk
->
èû
->
©r
);

131 
	`check_„©uª_li°
(
Xk_chg
);

133  
Xk_chg
->
k
 > 2 && 
Ym
->k>0)

135 
lsi_chg
=
	`glsi
(
Xk_chg
,
M
);

136 
Ê_ç
 
Xk_miu_chg
=
	`dñ_lsi
(
lsi_chg
,
Xk_chg
,
M
);

137 #ifde‡
debug_tŸÆ


138 
	`¥ötf
("Xk'†lsò:%d,Xk'-1 i†",
lsi_chg
);

139 
	`check_„©uª_li°
(
Xk_miu_chg
);

140 
	`¥ötf
("Sig(Xk'-1Ë%‡™d Sig(Xk-1Ë%d.so..\n",
	`EXACT
–
Xk_miu_chg
->
sig
), (
Xk
->
èû
->
≤
->
©r
));

142 if(
	`EXACT
–
Xk_miu_chg
->
sig
Ë> EXACT(
Xk
->
èû
->
≤
->sig) )

144 
Ê_ç
 
Xk_chg
=
	`l°_Ωlc
(Xk_chg,
Xk_miu_chg
);

145 
	`add_node
(
Xk
->
èû
->
©r
,
Ym
,Xk,
M
);

146 #ifde‡
debug_tŸÆ


147 
	`¥ötf
("Cause Xk'-1 > Xk-1,soÇow Xk");

148 
	`check_„©uª_li°
(
Xk
);

153 
	`add_node
(
msw
,
Xk
,
Ym
,
M
);

154 
Xk
=
	`dñ_lsi
(
lsi
,Xk,
M
);

155 #ifde‡
debug_tŸÆ


156 
	`¥ötf
("Cause Xk'-1 < Xk-1,SoÇow Xk");

157 
	`check_„©uª_li°
(
Xk
);

159 
	`‰ì
(
Xk_miu_chg
->
membs
);

160 
	`‰ì
(
Xk_miu_chg
);

168 
Xk
=
	`add_node
(
msw
,Xk,
Ym
,
M
);

169 #ifde‡
debug_tŸÆ


170 
	`¥ötf
("LsiÉqualsÅheÜast one,andÇow Xk ");

171 
	`check_„©uª_li°
(
Xk
);

175  
Xk
;

176 
	}
}

179 
	$gmsw
(
Ê_ç
 
Xk
,Ê_ç 
Ym
,
mic_m©rix
 
M
)

181 *
l°_Xk
=(*)
	`mÆloc
((
Xk
->
k
+1)*());

182 
i
=0;

183 if(
Xk
->
k
!=0)

185 
i
=0;i<
Xk
->
k
;i++)

187 
l°_Xk
[
i
]=
Xk
->
membs
[i];

190 
Xk_Àn
=
Xk
->
k
+1;

191 
max
=-
FLT_MAX
;

192 
©r
=-1;

193 
„t_ç
 
cur
=
Ym
->
hódî
;

194 
i
=0;i<
Ym
->
k
;i++)

196 
l°_Xk
[
Xk_Àn
-1]=
cur
->
©r
;

197 #ifde‡
debug_gmsw


198 
	`¥ötf
("cur->©r:%d\nCheck Xk_:",
cur
->
©r
);

199 
	`check_¨ry
(
l°_Xk
,
Xk
->
k
+1);

201 
mîô
=
	`ˇl_mîô
(
l°_Xk
,
Xk_Àn
,
M
);

202 #ifde‡
debug_gmsw


203 
	`¥ötf
("Debuggög gmswándÇow mîô %‡wôháå %d.\n",
mîô
,
cur
->
©r
);

205 if(
	`EXACT
(
mîô
)>EXACT(
max
))

207 
max
=
mîô
;

208 
©r
=
cur
->atr;

210 
cur
=cur->
¬
;

212 
	`‰ì
(
l°_Xk
);

213 #ifde‡
debug_gmsw


214 
	`¥ötf
("nowáå:%d\n",
©r
);

216  
©r
;

217 
	}
}

220 
Ê_ç
 
	$add_node
(
©r
,
Ê_ç
 
Xk
,Ê_ç 
Ym
,
mic_m©rix
 
M
)

222 
	#debug_addnode


	)

223 *
Xk_membs
=(*)
	`mÆloc
(()*(
Xk
->
k
+1));

224 *
Ym_membs
=(*)
	`mÆloc
(()*(
Ym
->
k
-1));

225 
p
=0;

226 
i
=0;

227 
i
=0;i<
Xk
->
k
;i++)

229 
Xk_membs
[
i
]=
Xk
->
membs
[i];

231 #ifde‡
debug_addnode


232 
	`¥ötf
("I≈uà©∏:%d \n",
©r
);

234 
i
=0;i<
Ym
->
k
;i++)

236 if(
Ym
->
membs
[
i
]==
©r
)

238 
Xk_membs
[
Xk
->
k
]=
©r
;

239 #ifde‡
debug_addnode


240 
	`¥ötf
("gmwáŒig¿Xk:%d,Xk->k:%d\n",
Xk_membs
[
Xk
->
k
],Xk->k);

245 
Ym_membs
[
p
++]=
Ym
->
membs
[
i
];

246 #ifde‡
debug_addnode


247 
	`¥ötf
("gmwáŒig¿Ym:%d\n",
Ym_membs
[
p
-1]);

251 * 
ç
=
Xk
->
membs
;

252 
Xk
->
membs
=
Xk_membs
;

253 #ifde‡
debug_addnode


254 
i
=0;i<
Xk
->
k
+1;i++)

256 
	`¥ötf
("Xk membîs:%d\n",
Xk
->
membs
[
i
]);

259 
	`‰ì
(
ç
);

260 
ç
=
NULL
;

261 
ç
=
Ym
->
membs
;

262 
Ym
->
membs
=
Ym_membs
;

263 
	`‰ì
(
ç
);

264 
ç
=
NULL
;

268 
„t_ç
 
cur
=
Ym
->
hódî
;

269 
„t_ç
 
msw
=
NULL
;

270 
cur
)

272 if(
cur
->
©r
==atr)

274 
msw
=
cur
;

277 
cur
=cur->
¬
;

279 if(
msw
==
NULL
)

281 
	`puts
("Not foundÅhe msw .ThisÉrror is inádd_node ");

284 if(
msw
==
Ym
->
hódî
&&msw==Ym->
èû
)

286 
Ym
->
hódî
=
NULL
;

287 
Ym
->
èû
=
NULL
;

289 if(
msw
==
Ym
->
hódî
&&msw!=Ym->
èû
)

291 
Ym
->
hódî
=
msw
->
¬
;

292 
msw
->
¬
->
≤
=
NULL
;

294 if(
msw
==
Ym
->
èû
&&msw!=Ym->
hódî
)

296 
Ym
->
èû
=
msw
->
≤
;

297 
msw
->
≤
->
¬
=
NULL
;

301 
msw
->
≤
->
¬
=msw->nn;

302 
msw
->
¬
->
≤
=msw->pn;

304 
msw
->
≤
=
NULL
;

305 
msw
->
¬
=
NULL
;

306 if(
Xk
->
hódî
==
NULL
)

308 
Xk
->
hódî
=
msw
;

309 
Xk
->
èû
=
msw
;

313 
Xk
->
èû
->
¬
=
msw
;

314 
msw
->
≤
=
Xk
->
èû
;

315 
Xk
->
èû
=
msw
;

317 
Xk
->
k
+=1;

318 
Ym
->
k
-=1;

319 #ifde‡
debug_addnode


320 
	`check_„©uª_li°
(
Ym
);

321 
	`check_„©uª_li°
(
Xk
);

323 if(
Ym
->
hódî
)

325 
Ym
->
sig
=
	`ˇl_mîô
(Ym->
membs
,Ym->
k
,
M
);

326 
Ym
->
èû
->
sig
=Ym->sig;

328 if(
Xk
->
hódî
)

330 
Xk
->
sig
=
	`ˇl_mîô
(Xk->
membs
,Xk->
k
,
M
);

331 
Xk
->
èû
->
sig
=Xk->sig;

333 #ifde‡
debug_addnode


334 
	`¥ötf
("check Xk->sig:%f\tYm->sig:%f\n",
Xk
->
sig
,
Ym
->sig);

336  
Xk
;

337 
	}
}

340 
Ê_ç
 
	$∂us_msw
(
Ê_ç
 
Xk
,
msw
)

342 
Ê_ç
 
Xk_∂us
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

343 
Xk_∂us
->
k
=
Xk
->k+1;

344 
Xk_∂us
->
membs
=(*)
	`mÆloc
(()*(Xk_∂us->
k
));

345 
i
=0;

346 
i
=0;i<
Xk_∂us
->
k
-1;i++)

348 
Xk_∂us
->
membs
[
i
]=
Xk
->membs[i];

350 
Xk_∂us
->
membs
[
i
]=
msw
;

351 #ifde‡
debug_∂us_msw


352 
	`¥ötf
("Xk->œ°:%d\ti:%d\tmsw:%d\n",
Xk_∂us
->
membs
[Xk_∂us->
k
-1],
i
,Xk_plus->membs[i]);

354 
Xk_∂us
->
hódî
=Xk_∂us->
èû
=
NULL
;

355  
Xk_∂us
;

356 
	}
}

359 
	$glsi
(
Ê_ç
 
Xk_∂us
,
mic_m©rix
 
M
)

361 
l
=
Xk_∂us
->
k
;

362 
i
=0;

364 *
£t
=(*)
	`mÆloc
(()*(
l
-1));

365 
©r
=-1;

366 
max
=-1;

367 
i
=0;i<
l
;i++)

369 
j
=0;

370 
k
=0;

371 
j
=0;j<
l
;j++)

373 if(
j
!=
i
)

375 
£t
[
k
++]=
Xk_∂us
->
membs
[
j
];

378 
mîô
=
	`ˇl_mîô
(
£t
,
l
-1,
M
);

379 #ifde‡
debug_glsi


380 
	`¥ötf
("li° wôhout:%d\tmîô i†%f\n",
Xk_∂us
->
membs
[
i
],
mîô
);

382 if(
	`EXACT
(
mîô
)>=EXACT(
max
))

384 
max
=
mîô
;

385 
©r
=
Xk_∂us
->
membs
[
i
];

388 
	`‰ì
(
£t
);

389  
©r
;

390 
	}
}

393 
Ê_ç
 
	$dñ_lsi
(
lsi
,
Ê_ç
 
Xk_∂us
,
mic_m©rix
 
M
)

395 
Ê_ç
 
chg
=(Ê_ç)
	`mÆloc
((
„©uª_li°
));

396 
chg
->
membs
=(*)
	`mÆloc
(()*(
Xk_∂us
->
k
-1));

397 
chg
->
k
=
Xk_∂us
->k-1;

398 
i
=0;

399 
k
=0;

400 
i
=0;i<
Xk_∂us
->
k
;i++)

402 if((
Xk_∂us
->
membs
[
i
])!=
lsi
)

404 
chg
->
membs
[
k
++]=
Xk_∂us
->membs[
i
];

407 #ifde‡
debug_dñ_lsi


408 
	`puts
("Here InÅhe del_lsi.");

409 
	`check_„©uª_li°
(
chg
);

411 
chg
->
sig
=
	`ˇl_mîô
(chg->
membs
,chg->
k
,
M
);

412 
chg
->
hódî
=
Xk_∂us
->header;

413 
chg
->
èû
=
Xk_∂us
->tail;

414  
chg
;

415 
	}
}

418 
Ê_ç
 
	$l°_Ωlc
(
Ê_ç
 
‹igöÆ
,Ê_ç 
èrgë
)

420 
	`‰ì
(
èrgë
->
membs
);

421 
	`‰ì
(
èrgë
);

422  
‹igöÆ
;

423 
	}
}

426 
	$brk_Êç
(
Ê_ç
 
Xk
)

428 
„t_ç
 
cur
=
Xk
->
èû
;

429 
cur
)

431 
„t_ç
 
ç
=
cur
;

432 
cur
=cur->
≤
;

433 
	`‰ì
(
ç
);

434 
ç
=
NULL
;

436 
	}
}

437 
	$check_„©uª_li°
(
Ê_ç
 
li°
)

439 
i
=0;

440 
RED_1
;

442 
RED_0
;

444 
i
=0;i<
li°
->
k
;i++)

446 
	`¥ötf
("%d\t",
li°
->
membs
[
i
]);

448 if(
li°
->
hódî
)

450 
	`puts
("Real One.\nCheckÇodes: ");

451 
„t_ç
 
cur
=
li°
->
hódî
;

452 
cur
)

454 
	`¥ötf
("©r:%d\tmic:%f\tsig:%f\n",
cur
->
©r
,cur->
mic
,cur->
sig
);

455 
cur
=cur->
¬
;

461 
	`¥ötf
("Virtual one.\n");

465 
	}
}

	@sffs_test.c

1 
	~"sffs.h
"

2 
	$check_„©uª_li°
(
Ê_ç
 
li°
)

4 
i
=0;

5 
RED_1
;

7 
RED_0
;

9 
i
=0;i<
li°
->
k
;i++)

11 
	`¥ötf
("%d\t",
li°
->
membs
[
i
]);

13 if(
li°
->
hódî
)

15 
	`puts
("Real One.\nCheckÇodes: ");

16 
„t_ç
 
cur
=
li°
->
hódî
;

17 
cur
)

19 
	`¥ötf
("©r:%d\tsig:%f\n",
cur
->
©r
,cur->
sig
);

20 
cur
=cur->
¬
;

26 
	`¥ötf
("Virtual one.\n");

30 
	}
}

	@
1
.
0
22
211
check_erro_part.c
fcbf.c
fcbf.h
ga.c
ga.h
ga_test.c
main.c
main.h
mic.c
mic.h
mic_matrix.c
mic_matrix.h
micfs.c
micfs.h
para_chk.c
para_chk.h
read_content.c
read_content.h
sffs.c
sffs.h
sffs_older.c
sffs_test.c
